{"version":3,"sources":["app/table/active/body/body.module.scss","app/row/drag/source/source.module.scss","app/row/row.module.scss","app/table/active/header/name/name.module.scss","app/edge/edge.module.scss","app/view/canvas/canvas.module.scss","app/view/header/style/header.module.scss","app/view/progress/progress.module.scss","app/app/footer/footer.module.scss","app/table/active/active.module.css","app/table/active/body/add/add.module.scss","app/row/field/boolean/boolean.module.css","app/row/field/field.module.scss","app/row/remove/remove.module.scss","app/table/active/header/remove/remove.module.css","app/table/inactive/inactive.module.css","app/view/canvas/edges/edges.module.css","app/view/header/layout/layout.module.css","app/view/header/style/mac.module.scss","external/external.ts","diagram/state/undo/undo.ts","utils/migrate.ts","app/row/drag/layer/layer.tsx","diagram/edit/convert/from.ts","diagram/state/external/external.ts","app/table/utils.ts","diagram/layout/dagree.ts","diagram/layout/masonry.ts","diagram/layout/merge.ts","diagram/layout/split.ts","diagram/layout/layout.ts","diagram/edit/convert/to.ts","diagram/schema/schema.ts","diagram/schema/semantic.ts","diagram/state/reducer/id.ts","diagram/state/reducer/row/add.ts","diagram/state/reducer/table/add.ts","diagram/state/reducer/parse/json.ts","diagram/state/reducer/parse/append.ts","diagram/state/reducer/ref/remove.ts","diagram/state/reducer/ref/ref.ts","diagram/state/reducer/ref/add.ts","diagram/state/reducer/row/remove.ts","diagram/state/reducer/row/update.ts","diagram/state/reducer/table/remove.ts","diagram/state/reducer/table/update-name.ts","diagram/state/reducer/table/table.ts","diagram/state/reducer/table/position.ts","utils/platform.ts","diagram/state/storage/fallback.ts","diagram/state/storage/storage.ts","diagram/state/undo/shortcut.ts","diagram/state/use-diagram.ts","diagram/state/reducer/reducer.ts","diagram/state/reducer/row/row.ts","diagram/state/reducer/layout/layout.ts","diagram/state/reducer/parse/parse.ts","app/edge/utils.ts","app/edge/from.tsx","app/row/dom.ts","app/edge/state/box.ts","app/edge/state/observe.ts","app/edge/state/path.ts","app/edge/state/point.ts","app/edge/state/mid.ts","app/edge/state/state.ts","app/edge/to.tsx","app/table/active/drag/move.ts","app/table/active/drag/stop.ts","app/view/select/select.ts","app/table/active/body/add/add.tsx","app/table/active/body/events/navigate.ts","app/table/active/body/header/header.tsx","app/row/drag/source/source.tsx","app/row/field/boolean/boolean.tsx","app/row/field/string/leave.ts","app/row/field/string/string.tsx","app/row/field/field.tsx","app/row/key.ts","app/row/remove/remove.tsx","app/row/row.tsx","app/row/drag/drop/drop.ts","app/table/active/body/rows/rows.tsx","app/table/active/body/rows/edge-map.ts","app/table/active/body/rows/group.ts","app/table/active/body/body.tsx","app/table/active/header/name/name.tsx","app/table/active/header/remove/remove.tsx","app/table/active/header/header.tsx","app/table/active/main/event.ts","app/table/active/main/main.tsx","app/table/active/active.tsx","app/table/inactive/inactive.tsx","app/table/table.tsx","app/view/select/canvas/drag/box.ts","app/view/select/canvas/drag/overlap.ts","app/view/select/canvas/drag/element.ts","app/view/select/canvas/drag/drag.tsx","app/view/select/edge.ts","app/edge/highlight.tsx","app/edge/edge.tsx","app/view/canvas/edges/edges.tsx","app/view/canvas/canvas.tsx","app/view/drag/use-drag.ts","app/view/header/add.tsx","app/view/header/export/image/get.ts","app/view/header/export/image/save.ts","app/view/header/export/image/image.ts","app/view/header/export/sql/sql.ts","app/view/header/export/export.tsx","app/view/header/history.tsx","app/view/header/layout/layout.tsx","app/view/header/sample/sample.tsx","app/view/select/table.ts","app/view/header/search.tsx","app/view/header/theme.tsx","app/view/header/zoom.tsx","app/view/header/header.tsx","app/view/progress/progress.tsx","app/view/select/canvas/copy.ts","app/view/select/canvas/delete.ts","app/view/select/canvas/paste.ts","app/view/view.tsx","app/app/footer/footer.tsx","app/app/app.tsx","index.tsx","app/row/drag/layer/layer.module.scss","app/row/field/string/string.module.scss","app/table/active/header/header.module.scss","app/view/view.module.scss","app/table/active/body/header/header.module.scss","app/table/active/main/main.module.scss","app/view/select/canvas/drag/drag.module.css","app/app/app.module.scss"],"names":["module","exports","globalFns","globalLogger","addExternalFn","name","internalFn","pendingArgs","args","push","fn","length","shift","window","Diagram","Logger","orgReducer","storage","collect","monitor","isDragging","getItemType","offset","getClientOffset","item","getItem","top","y","left","x","ToIcon","React","memo","style","color","className","s","icon","path","locate","size","RowDragLayer","props","dragging","useDragLayer","initialRef","useRef","dragTargetRef","elementRef","viewportRef","useEffect","current","undefined","sourceRef","viewport","Error","source","box","getBoundingClientRect","height","width","scrollTop","scrollLeft","getInitialState","initial","diffLeft","diffTop","container","svg","line","x1","y1","x2","y2","makeRefSide","map","side","ids","get","table","rows","editId","realId","schema","makeDiagramFromEdit","edit","columns","column","value","items","tables","row","id","idsMap","Map","forEach","set","idsTable","makeIdsMap","refs","ref","from","to","registerLegacy","registerJson","registerObject","registerBase64","decoder","TextDecoder","useDiagramExternal","diagram","diagramDispatch","text","type","payload","isAppend","object","JSON","stringify","base64","bytes","Uint8Array","atob","c","charCodeAt","decode","getTableElementId","tableId","getTableElement","element","document","getElementById","HTMLDivElement","getTableEstimatedSize","isRowsExpand","Math","min","MAX_ROWS_COUNT","roundPoint","num","round","applyDagreeLayout","g","dagre","graphlib","Graph","multigraph","setGraph","rankdir","nodesep","TABLE_MARGIN_SINGLE","ranksep","marginx","marginy","setDefaultEdgeLabel","dataset","clientWidth","clientHeight","e","Utils","setNode","toString","label","setEdge","layout","prev","node","position","graph","TABLE_CLIENT_WIDTH","ceil","area","getMasonryLayout","diagrams","nodes","columnsCount","minWidth","reduce","max","Infinity","totalArea","sum","expectedWidth","sqrt","getColumnCount","tops","Array","fill","positions","getAppendPosition","_top","index","leftIndex","start","i","getRangeMaxTop","sort","a","b","target","newHeight","getSize","masonry","right","bottom","parentElement","getTables","params","translate","originalDiagram","splitDiagram","bigDiagram","done","tableMap","refMap","concat","pushTableToDiagram","state","includes","fromTable","toTable","applyAutoLayout","fallbackSchema","makeTable","raw","makeColumn","makeEditFromDiagram","tuple","makeRef","ajv","Ajv","strictDefaults","strictKeywords","ajvValidate","compile","SemanticError","message","eRef","validateRefSide","find","isSameSchema","rowId","some","validateSemantic","Set","validateItemsIds","validateRowsIds","getGenericId","makeId","counter","has","getStringId","prefix","getNumberId","getDefaultRow","valueIds","addRow","update","updateTable","toMaxLeft","getTableNewPosition","getNewSize","parseJson","parse","data","errors","SyntaxError","errorsText","dataVar","validateSchema","original","t","appendDiagram","error","alert","join","getErrorMessage","removeRef","filter","diagramRefReducer","action","isFromPayload","prevIds","addRef","next","removeMultipleRefs","isSideRelated","removeRow","isRelated","property","updateEditRow","updateRow","attribute","isSame","removeTable","updateTableName","updateName","diagramTableReducer","addTable","removeMultipleTables","setTablePosition","webDomains","location","hostname","startsWith","navigator","platform","toLowerCase","PlatformContext","createContext","usePlatform","useContext","registerExternal","emptyDiagram","fallbackDiagram","nullable","parseErrorMessage","useDiagramStorage","StorageContext","useMemo","stored","setItem","getDiagram","setDiagram","useDiagramUndoShortcut","history","dispatch","listener","event","ctrlKey","metaKey","HTMLInputElement","HTMLTextAreaElement","key","past","future","makeListener","addEventListener","removeEventListener","undoReducer","diagramRowReducer","diagramLayoutReducer","diagramParseReducer","present","slice","getEdgeElementId","edgeId","getEdgeSubElementId","getEdgeSubElement","SVGElement","getEdgeFromAttributes","point","cx","cy","EdgeFrom","points","inners","edge","r","getRowElementId","getEdgeSideBoxes","tablePosition","tableTop","tableLeft","getRowElement","offsetTop","offsetLeft","parent","offsetParent","HTMLElement","getOffsetUntil","rowTop","rowLeft","SafeResizeObserver","ResizeObserver","ResizeObserverPolyfill","mutationInit","attributeFilter","getPathD","getPathLength","pow","toPoint","getOuterPoint","getEdgePoints","edgesMids","boxes","fromSide","toSide","SAFE_SPACE","fromInners","fromOuter","toInners","outer","getEndPoints","mid","midX","getMidPoints","edgesMap","usedMids","midPoints","result","getClosestAvailable","detail","add","avoidMidCollision","getEdgeState","getEdgeBoxes","mainPoints","fromPoints","flatMap","p","toPoints","main","getEdgePath","useEdgeState","changed","setChanged","resize","resizeCb","observe","mutation","MutationObserver","records","record","attributeName","mutationCb","disconnect","useEdgeObserve","setState","clearTimeout","setTimeout","newState","rotateInner","getEdgeToAttributes","transform","EdgeTo","setAttributes","attributes","Object","entries","setAttribute","onTableDragMove","_event","relatedEdges","relatedEdge","related","updateEdgeElements","onTableDragStop","filterId","getSelectSets","TableBodyAdd","onClick","Button","small","flat","isFullWidth","getSibling","isPrevious","previousElementSibling","nextElementSibling","getNextParent","curr","isUp","currParent","closest","nextParent","classList","contains","getChildControl","first","querySelector","all","querySelectorAll","control","getNextControl","isLeft","indexOf","getControlIndex","navigate","preventDefault","wrapper","focus","focusChildControl","navigateViaArrowKeys","background","secondary","borderColor","weak","muted","renderColumn","cls","field","rightField","children","TableBodyHeader","blank","iconSize","isExpand","setIsExpand","doubleChevronLeft","doubleChevronRight","RowDragSource","useDrag","begin","beginDrag","end","_item","getDropResult","endDrag","collectDrag","dragRefCallback","previewRef","getEmptyImage","useState","isHover","setIsHover","isActive","iconNode","selection","circle","onMouseEnter","onMouseLeave","TRUE_PREFIX","RowInputBoolean","charAt","setValue","bool","options","Select","timeout","Edit","defaultValue","Input","autoFocus","onBlur","currentTarget","setIsEdit","onKeyDown","onKeyUp","view","viewRef","focusView","viewClass","outline","always","ViewValue","empty","View","tabIndex","onDoubleClick","onFocus","RowInputString","isEdit","internal","updateRowField","RowFieldInput","isRight","getInput","dispatchRemoveRow","RowRemoveButton","remove","Row","useDrop","accept","drop","isOver","dropRef","isEmpty","useRowKeyUpListeners","over","renderRow","edgeMap","isTableEdit","isTableExpand","HiddenRows","marginTop","show","count","HideButton","hide","TableBodyRows","setIsRowsExpand","edges","getTableRowsEdgeMap","slotCount","prevGroup","groupTableRows","render","setIsRowExpand","isArray","renderItem","canExpand","relatedTarget","HTMLButtonElement","TableBody","header","HeaderName","onMouseDown","clientX","clientY","TableHeaderRemove","primary","cross","TableHeader","onTableBlur","isRowDragging","getCls","strong","isSelected","selected","toEdgeId","setSelectIds","every","TableMain","isMyRow","TableActive","dragRef","onDrag","onStop","nodeRef","scale","zoom","cancel","setSelectId","TableInactive","Table","selfVisible","setSelfVisible","setIsVisible","callback","entry","isIntersecting","observer","IntersectionObserver","threshold","root","isVisible","forceVisible","zIndex","data-name","data-is-visible","getDragBox","startRef","nativeEvent","offsetX","offsetY","setOpacity","opacity","emptyBox","setSize","setDragBoxStyles","boxRef","isTableOverlap","getIds","getOverlapIds","getOverlapTables","getOverlapRefs","setClass","isOverlap","setTempSelect","SVGGElement","getEdgeElement","setContainerStyles","emptyIds","SelectDragLayer","isDraggingRef","containerRef","spaceLockRef","onMouseMove","onMouseUp","boxBg","selectOnRefClick","refId","EdgeHighlight","dot","dur","repeatCount","getClassName","array","Edge","draw","d","hitarea","CanvasEdges","getTable","tablesMap","useEdgesMids","selectedRefs","getContainerStyle","halfMargin","margin","fontSize","toTablesMap","emptyArray","Canvas","fromKey","fromEdges","toKey","toEdges","toRelatedEdgesMap","grid","selectedTables","drag","setDrag","dragscroll","reset","me","scrollOption","behavior","block","inline","HeaderAddTable","scrollIntoView","buttonSize","plus","prefixes","png","getImageData","format","domtoimage","toPng","canvas","toSvg","sleep","Promise","resolve","getExportImageFile","setTableVisible","body","replace","badWords","toBase64","file","clean","word","replaceAll","encode","saveExportImageFile","ext","title","webkit","messageHandlers","saveFile","postMessage","saveWithWebkit","link","createElement","download","href","click","saveWithLink","exportAsImage","exportSqlDrivers","HeaderExport","actions","disabled","driver","exportSQL","exportAsSql","share","undo","redo","HeaderHistory","layoutAction","getActions","HeaderLayout","layoutAuto","caret","selfSamples","loadRemote","url","fetch","then","response","json","HeaderSample","getTableRelatedIds","HeaderSearch","_setValue","focusIfNecessary","focusTable","flex","search","placeholder","newValue","list","values","inputSize","flash","moon","HeaderTheme","theme","setTheme","setZoom","HeaderZoom","zoomOut","zoomIn","platformStyle","web","mac","sMac","ViewHeader","medium","bigDiv","border","getBigDiv","platformPad","diagramPast","diagramFuture","ViewProgress","progress","setProgress","setText","useCanvasCatchCopy","clipboardData","setData","catchCopy","filterIds","useCanvasCatchPaste","getData","catchPaste","useReducer","storageSet","useDiagram","select","setIds","useSelect","useTheme","tableVisible","useDragToScroll","stopPropagation","catchDelete","Logo","logo","rel","alt","src","Footer","dataText","offlineMode","App","scrollbar","custom","footer","AppStorage","clear","Root","setPlatform","usePlatformProvider","StrictMode","Provider","HTML5toTouch","ReactDOM"],"mappings":"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","file":"static/js/main.45dd1145.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"body_container__3oC6s\",\"header\":\"body_header__jV-GI\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"source_container__3TgWW\",\"slide-in\":\"source_slide-in__P2Ug9\",\"dragging\":\"source_dragging__1rxAg\",\"button\":\"source_button__2cu3w\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"row_container__2yTZp\",\"over\":\"row_over__2gC30\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"name_container__1o8SY\",\"view\":\"name_view__15GrF\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"edge_container__1EyW3\",\"from\":\"edge_from__1Ovs9\",\"to\":\"edge_to__3E3uJ\",\"path\":\"edge_path__x4S4v\",\"dot\":\"edge_dot__2KuhC\",\"selected\":\"edge_selected__1Gpep\",\"hitarea\":\"edge_hitarea__3Airq\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"canvas_container__3Y18v\",\"grid\":\"canvas_grid__nkChd\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"header_container__-KQI5\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"progress_container__1kfqj\",\"body\":\"progress_body__2EtDz\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"footer_container__3MvUg\",\"logo\":\"footer_logo__3qLuS\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"active_container__3joLV\",\"react-draggable-dragging\":\"active_react-draggable-dragging__1JdPr\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"add_container__2lSlZ\",\"slide-in\":\"add_slide-in__2Hk9K\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"boolean_container__1bqLB\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"right\":\"field_right__3YAJ4\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"remove_container__Ts2Bx\",\"slide-in\":\"remove_slide-in__3caLT\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"remove_container__2HEZR\",\"win-background\":\"remove_win-background__WJQ6a\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"inactive_container__2xyR0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"edges_container__2FGMc\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"layout_container__SVyb1\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"mac_container__YDixB\",\"weak\":\"mac_weak__3A9TF\"};","type VoidFn = (...args: any[]) => void;\n\n// Functions for outside to use\nconst globalFns: { [name: string]: Function } = {};\n\nconst globalLogger: [string, any][] = [];\n\nexport const addExternalFnDirect = (name: string, fn: Function) => {\n    globalFns[name] = fn;\n};\n\nexport const addExternalFn = (name: string): ((fn: VoidFn) => void) => {\n    let internalFn: VoidFn | null = null;\n    const pendingArgs: any[][] = [];\n\n    // External\n    const externalFn = (...args: any[]) => {\n        if (internalFn !== null) {\n            globalLogger.push([\"Execute\", args]);\n            return internalFn(...args);\n        } else {\n            globalLogger.push([\"Pending\", args]);\n            pendingArgs.push(args);\n        }\n    };\n    globalFns[name] = externalFn;\n\n    // Register\n    const registerFn = (fn: VoidFn) => {\n        internalFn = fn;\n        while (pendingArgs.length > 0) {\n            const args = pendingArgs.shift();\n            globalLogger.push([\"Execute pending item\", args]);\n            (internalFn as VoidFn)(...args);\n        }\n    };\n    return registerFn;\n};\n\n(window as any).Diagram = globalFns;\n(window as any).Logger = globalLogger;\n","import { debugLog } from \"utils/debug\";\nimport React from \"react\";\n\nexport interface UndoState<S> {\n    past: S[];\n    present: S;\n    future: S[];\n}\n\nexport type UndoAction = { type: \"undo\" } | { type: \"redo\" };\n\nexport const createUndoInitial = <S>(initial: S): UndoState<S> => ({\n    past: [],\n    present: initial,\n    future: [],\n});\n\ntype Action = { type: string };\n\nexport const createUndoReducer = <S, A extends Action>(\n    orgReducer: React.Reducer<S, A>\n) => (prev: UndoState<S>, action: UndoAction | A): UndoState<S> => {\n    switch (action.type) {\n        case \"undo\": {\n            const [present, ...past] = prev.past;\n            const future = [prev.present, ...prev.future];\n            return { past, present, future };\n        }\n        case \"redo\": {\n            const [present, ...future] = prev.future;\n            const past = [prev.present, ...prev.past];\n            return { past, present, future };\n        }\n        default: {\n            debugLog(\"Undo create new past\");\n            const present = orgReducer(prev.present, action as any);\n            let past = [prev.present, ...prev.past];\n            past = past.length < 20 ? past : past.slice(0, 20);\n            return { past, present, future: [] };\n        }\n    }\n};\n","import { AppStorage } from \"@tableplus/toolkit/src/storage/storage\";\n\nconst current = \"5\";\n\n// Temporary safe lock\nexport const migrateStorage = (storage: AppStorage) => {\n    const prev = storage.getItem(\"version\");\n    if (prev !== current) {\n        storage.clear();\n        storage.setItem(\"version\", current);\n    }\n};\n","import React from \"react\";\nimport { useDragLayer, DragLayerMonitor } from \"react-dnd\";\nimport { icon } from \"@tableplus/toolkit/src/icon/icon\";\nimport { Icon } from \"@moai/core\";\nimport s from \"./layer.module.scss\";\nimport { RowDragItem } from \"../drag\";\nimport { debugLog } from \"utils/debug\";\n\ninterface DraggingProps {\n    item: RowDragItem;\n    top: number;\n    left: number;\n}\n\nconst collect = (monitor: DragLayerMonitor): DraggingProps | null => {\n    if (!monitor.isDragging()) return null;\n    if (monitor.getItemType() !== \"row\") return null;\n    const offset = monitor.getClientOffset();\n    const item = monitor.getItem();\n    if (item === null || offset === null) return null;\n    return { item, top: offset.y, left: offset.x };\n};\n\ninterface InitialState {\n    scrollLeft: number;\n    scrollTop: number;\n    top: number;\n    left: number;\n}\n\ninterface Props {\n    viewportRef: React.RefObject<HTMLDivElement>;\n}\n\nconst getInitialState = (\n    viewportRef: React.RefObject<HTMLDivElement>,\n    sourceRef: React.RefObject<HTMLDivElement>\n): InitialState => {\n    const viewport = viewportRef.current;\n    if (viewport === null) throw Error(\"Viewport is not defined\");\n    const source = sourceRef.current;\n    if (source === null) throw Error(\"Source drag is not defined\");\n    const box = source.getBoundingClientRect();\n    const [top, left] = [box.top + box.height / 2, box.left + box.width / 2];\n    const { scrollTop, scrollLeft } = viewport;\n    return { top, left, scrollTop, scrollLeft };\n};\n\nconst ToIconPure = ({ top, left }: { top: number; left: number }) => (\n    <div style={{ color: \"var(--accent-2)\" }}>\n        <div className={s.icon} style={{ top: top - 8, left: left - 8 }}>\n            <Icon path={icon.locate} size={16} />\n        </div>\n    </div>\n);\n\nconst ToIcon = React.memo(ToIconPure);\n\nconst RowDragLayerPure = (props: Props) => {\n    debugLog(\"RowDragLayer\");\n\n    const dragging = useDragLayer(collect);\n    const initialRef = React.useRef<InitialState | null>(null);\n\n    // Reset initial state based on is dragging or not\n    const dragTargetRef = dragging?.item.elementRef;\n    const { viewportRef } = props;\n    React.useEffect(() => {\n        initialRef.current =\n            dragTargetRef === undefined\n                ? null\n                : getInitialState(viewportRef, dragTargetRef);\n    }, [viewportRef, dragTargetRef]);\n\n    const initial = initialRef.current;\n    if (dragging === null || initial === null) return null;\n    const viewport = props.viewportRef.current;\n    if (viewport === null) throw Error(\"viewport is not defined\");\n\n    const diffLeft = viewport.scrollLeft - initial.scrollLeft;\n    const diffTop = viewport.scrollTop - initial.scrollTop;\n\n    return (\n        <div className={s.container}>\n            <svg className={s.svg}>\n                <line\n                    className={s.line}\n                    x1={initial.left - diffLeft}\n                    y1={initial.top - diffTop}\n                    x2={dragging.left}\n                    y2={dragging.top}\n                />\n            </svg>\n            <ToIcon top={dragging.top} left={dragging.left} />\n        </div>\n    );\n};\n\nexport const RowDragLayer = React.memo(RowDragLayerPure);\n","import * as Raw from \"../../diagram\";\nimport * as Edit from \"../edit\";\n\n// Prepared maps from EDIT ids to [name, schema] to speed up EditRef conversion\ntype Ids = {\n    table: { name: string; schema: string | undefined };\n    rows: Map<number, string>;\n};\ntype IdsMap = Map<number, Ids>;\n\nconst makeIdsMap = (tables: Edit.EditTable[]): IdsMap => {\n    const idsMap = new Map<number, Ids>();\n    tables.forEach((table) => {\n        const rows = new Map<number, string>();\n        table.value.rows.forEach((row) => void rows.set(row.id, row.value.id));\n        const idsTable = { name: table.value.name, schema: table.value.schema };\n        idsMap.set(table.id, { table: idsTable, rows });\n    });\n    return idsMap;\n};\n\nconst makeRefSide = (map: IdsMap, side: Edit.EditRefSide): Raw.RefSide => {\n    const ids = map.get(side.table);\n    if (!ids) throw Error(`Table Ids \"${side.table}\" not found`);\n    const rows = side.rows.map((editId) => {\n        const realId = ids.rows.get(editId);\n        if (!realId) throw Error(`Row id \"${editId}\" not found`);\n        return realId;\n    });\n    const { name, schema } = ids.table;\n    return { name, schema, rows };\n};\n\nexport const makeDiagramFromEdit = (edit: Edit.EditDiagram): Raw.Diagram => {\n    const columns: Raw.Column[] = edit.columns.map((column) => column.value);\n    const items: Raw.Item[] = edit.tables.map((table) => {\n        const rows: Raw.Row[] = table.value.rows.map((row) => row.value);\n        const { id, name, schema } = table.value;\n        return { id, name, schema, rows };\n    });\n    const idsMap = makeIdsMap(edit.tables);\n    const refs: Raw.Ref[] = edit.refs.map((ref) => ({\n        from: makeRefSide(idsMap, ref.from),\n        to: makeRefSide(idsMap, ref.to),\n    }));\n    return { columns, items, refs, schema: edit.schema };\n};\n","import { addExternalFn, addExternalFnDirect } from \"external/external\";\nimport { makeDiagramFromEdit } from \"diagram/edit/convert/from\";\nimport React from \"react\";\nimport { EditDiagram } from \"../../edit/edit\";\nimport { DiagramAction } from \"../reducer/reducer\";\nimport { ParseJsonPayload } from \"../reducer/parse/json\";\n\nconst registerLegacy = addExternalFn(\"importDiagram\");\nconst registerJson = addExternalFn(\"importDiagramJSON\");\nconst registerObject = addExternalFn(\"importDiagramObject\");\nconst registerBase64 = addExternalFn(\"importDiagramBase64\");\n\nconst decoder = new TextDecoder();\n\nexport const useDiagramExternal = (\n    diagram: EditDiagram,\n    diagramDispatch: React.Dispatch<DiagramAction>\n) => {\n    React.useEffect(() => {\n        registerLegacy((text: string) => {\n            const payload: ParseJsonPayload = { text, isAppend: false };\n            diagramDispatch({ type: \"parse-json\", payload });\n        });\n        registerJson((text: string) => {\n            const payload: ParseJsonPayload = { text, isAppend: false };\n            diagramDispatch({ type: \"parse-json\", payload });\n        });\n        registerObject((object: object) => {\n            const text = JSON.stringify(object);\n            const payload: ParseJsonPayload = { text, isAppend: false };\n            diagramDispatch({ type: \"parse-json\", payload });\n        });\n        registerBase64((base64: string) => {\n            const bytes = Uint8Array.from(atob(base64), (c) => c.charCodeAt(0));\n            const text = decoder.decode(bytes);\n            const payload: ParseJsonPayload = { text, isAppend: false };\n            diagramDispatch({ type: \"parse-json\", payload });\n        });\n    }, [diagramDispatch]);\n    React.useEffect(() => {\n        addExternalFnDirect(\"exportDiagram\", () => {\n            return JSON.stringify(makeDiagramFromEdit(diagram));\n        });\n    }, [diagram]);\n};\n","import { EditTable } from \"diagram/edit/edit\";\n\nexport const MAX_ROWS_COUNT = 50;\nexport const TABLE_CLIENT_WIDTH = 224;\nexport const TABLE_MARGIN_SINGLE = 48;\nexport const TABLE_MARGIN_DOUBLE = TABLE_MARGIN_SINGLE * 2;\nexport const TABLE_OFFSET_WIDTH = TABLE_CLIENT_WIDTH + TABLE_MARGIN_DOUBLE;\n\nexport const getTableElementId = (tableId: number) => `table . ${tableId}`;\n\nexport const getTableElement = (tableId: number): HTMLDivElement => {\n    const element = document.getElementById(getTableElementId(tableId));\n    if (element instanceof HTMLDivElement) return element;\n    throw Error(\"Element is not HTMLDivElement\");\n};\n\ninterface Size {\n    width: number;\n    height: number;\n}\n\nexport const getTableEstimatedSize = (\n    table: EditTable,\n    isRowsExpand?: boolean\n): Size => {\n    // We hide rows when there are more\n    const count = isRowsExpand\n        ? table.value.rows.length\n        : Math.min(table.value.rows.length, MAX_ROWS_COUNT + 1);\n    // Use an estimated value based on the number of rows (these values\n    // come from manually measuring the initial render)\n    return { width: TABLE_CLIENT_WIDTH, height: count * 24 + 64 };\n};\n\nexport const getTableSize = (table: EditTable): Size => {\n    // Try to get exact size if possible\n    try {\n        const element = getTableElement(table.id);\n        // Double check to avoid using one from previous diagram. This happens\n        // when import a new layout\n        if (element.dataset.name !== table.value.name)\n            throw Error(\"Outdated table from previous diagram\");\n        return { width: element.clientWidth, height: element.clientHeight };\n    } catch (e) {\n        // If can't find the element then use estimated size\n        // (This happens when the algo is run before rendering, like in import)\n        return getTableEstimatedSize(table);\n    }\n};\n","import * as Utils from \"app/table/utils\";\nimport dagre from \"dagre\";\nimport { TablePosition } from \"diagram/edit/layout\";\nimport { LayoutDiagram } from \"./layout\";\n\nconst roundPoint = (num: number) => Math.round(num / 8) * 8;\nconst roundWidth = (num: number) =>\n    Math.ceil(num / Utils.TABLE_OFFSET_WIDTH) * Utils.TABLE_OFFSET_WIDTH;\n\nexport const applyDagreeLayout = (diagram: LayoutDiagram): LayoutDiagram => {\n    const g = new dagre.graphlib.Graph({ multigraph: true });\n    g.setGraph({\n        rankdir: \"LR\",\n        nodesep: Utils.TABLE_MARGIN_DOUBLE,\n        ranksep: Utils.TABLE_MARGIN_DOUBLE,\n        marginx: Utils.TABLE_MARGIN_SINGLE,\n        marginy: Utils.TABLE_MARGIN_SINGLE,\n    });\n    g.setDefaultEdgeLabel(() => ({}));\n\n    // nodes\n    diagram.tables.forEach((table) => {\n        const { width, height } = Utils.getTableSize(table);\n        g.setNode(table.id.toString(), { label: \"\", width, height });\n    });\n\n    // edges\n    diagram.refs.forEach((ref) => {\n        g.setEdge(ref.from.table.toString(), ref.to.table.toString());\n    });\n\n    dagre.layout(g);\n\n    return {\n        tables: diagram.tables.map((prev) => {\n            const box = g.node(prev.id.toString()); // @TODO check undefined?\n            // Note that dagre's x y is center, not top left\n            const position: TablePosition = { top: 0, left: 0 };\n            position.top = roundPoint(box.y - box.height / 2);\n            position.left = roundPoint(box.x - box.width / 2);\n            return { ...prev, position };\n        }),\n        refs: diagram.refs,\n        size: {\n            width: roundWidth(g.graph().width ?? -1), // @TODO throw Error?\n            height: roundPoint(g.graph().height ?? -1),\n        },\n    };\n};\n","import { TABLE_OFFSET_WIDTH } from \"app/table/utils\";\nimport { LayoutDiagram } from \"./layout\";\n\ninterface Position {\n    top: number;\n    left: number;\n}\n\ninterface AppendPosition {\n    top: number;\n    leftIndex: number;\n}\n\nexport interface MasonryNode {\n    id: number;\n    width: number;\n    height: number;\n}\n\nexport type MasonryMap = Map<number, Position>;\n\nconst area = (node: MasonryNode) => node.height * node.width;\n\n// Try to make a 2:1 rectangle\nconst getColumnCount = (nodes: MasonryNode[]): number => {\n    // Should be bigger than the biggest node's width\n    const minWidth = nodes.reduce((max, node) => {\n        return max > node.width ? max : node.width;\n    }, -Infinity);\n    // Total area\n    const totalArea = nodes.reduce((sum, node) => sum + area(node), 0);\n    const expectedWidth = Math.sqrt(totalArea / 2) * 2;\n    const width = Math.max(expectedWidth, minWidth);\n    // 1 column is TABLE_OFFSET_WIDTH px wide\n    return Math.ceil(width / TABLE_OFFSET_WIDTH);\n};\n\nexport const getMasonryLayout = (diagrams: LayoutDiagram[]): MasonryMap => {\n    const nodes: MasonryNode[] = diagrams.map((diagram) => ({\n        id: diagram.tables[0].id,\n        width: diagram.size.width,\n        height: diagram.size.height,\n    }));\n\n    const columnsCount = getColumnCount(nodes);\n    const tops = Array(columnsCount).fill(0);\n    const positions = new Map<number, Position>();\n\n    // Max top is the actual top if a target of \"width\" is put at \"start\"\n    const getRangeMaxTop = (start: number, columns: number): number => {\n        if (start + columns > tops.length) return Infinity;\n        let max = -Infinity;\n        for (let i = 0; i < columns; i++) {\n            const top = tops[start + i];\n            max = Math.max(top, max);\n        }\n        return max;\n    };\n\n    const getAppendPosition = (columns: number): AppendPosition => {\n        // Actual top if put target at \"index\"\n        const candidates = tops.map((_top, index) => {\n            const height = getRangeMaxTop(index, columns);\n            return { leftIndex: index, top: height };\n        });\n        // Pick the one with smallest top\n        return candidates.reduce((prev, current) =>\n            current.top < prev.top ? current : prev\n        );\n    };\n\n    const appendTarget = (target: MasonryNode) => {\n        const columns = target.width / TABLE_OFFSET_WIDTH;\n        const position = getAppendPosition(columns);\n        // Update \"tops\" map\n        const newHeight = position.top + target.height;\n        for (let i = 0; i < columns; i++) {\n            tops[position.leftIndex + i] = newHeight;\n        }\n        // Set position\n        positions.set(target.id, {\n            left: position.leftIndex * TABLE_OFFSET_WIDTH,\n            top: position.top,\n        });\n    };\n\n    nodes\n        .sort((a, b) => area(b) - area(a)) // Put big table first\n        .forEach(appendTarget);\n    return positions;\n};\n","import {\n    TABLE_MARGIN_DOUBLE as MARGIN_DOUBLE,\n    TABLE_MARGIN_SINGLE as MARGIN_SINGLE,\n} from \"app/table/utils\";\nimport { EditDiagram, EditTable } from \"diagram/edit/edit\";\nimport { TablePosition } from \"diagram/edit/layout\";\nimport { LayoutDiagram } from \"./layout\";\nimport { MasonryMap } from \"./masonry\";\n\ninterface Params {\n    originalDiagram: EditDiagram;\n    diagrams: LayoutDiagram[];\n    masonry: MasonryMap;\n}\n\ninterface Size {\n    width: number;\n    height: number;\n}\n\nconst getSize = ({ diagrams, masonry }: Params): Size => {\n    let [width, height] = [0, 0];\n    diagrams.forEach((diagram) => {\n        const position = masonry.get(diagram.tables[0].id);\n        if (position === undefined) throw Error(`position is undefined`);\n        const right = position.left + diagram.size.width;\n        width = Math.max(width, right);\n        const bottom = position.top + diagram.size.height;\n        height = Math.max(height, bottom);\n    });\n    [width, height] = [width + MARGIN_DOUBLE, height + MARGIN_DOUBLE];\n\n    const viewport = document.getElementById(\"canvas\")?.parentElement ?? null;\n    if (viewport !== null) {\n        width = Math.max(viewport.clientWidth, width);\n        height = Math.max(viewport.clientHeight, height);\n    }\n\n    return { width, height };\n};\n\nconst getTables = (params: Params): EditTable[] => {\n    const tables: EditTable[] = [];\n    params.diagrams.forEach((diagram) => {\n        const translate = params.masonry.get(diagram.tables[0].id);\n        if (translate === undefined) throw Error(\"translate is undefined\");\n        diagram.tables.forEach((prev) => {\n            const position: TablePosition = {\n                top: translate.top + prev.position.top + MARGIN_SINGLE,\n                left: translate.left + prev.position.left + MARGIN_SINGLE,\n            };\n            tables.push({ ...prev, position });\n        });\n    });\n    if (tables.length === params.originalDiagram.tables.length) return tables;\n    throw Error(\"new tables and old tables have different length\");\n};\n\nexport const mergeDiagram = (params: Params): EditDiagram => ({\n    columns: params.originalDiagram.columns,\n    tables: getTables(params),\n    refs: params.originalDiagram.refs,\n    size: getSize(params),\n    schema: params.originalDiagram.schema,\n});\n","import { EditDiagram, EditRef, EditTable } from \"diagram/edit/edit\";\nimport { applyDagreeLayout } from \"./dagree\";\nimport { LayoutDiagram } from \"./layout\";\n\ninterface State {\n    diagram: LayoutDiagram;\n    done: Map<number, boolean>;\n    tableMap: Map<number, EditTable>;\n    refMap: Map<number, EditRef[]>;\n}\n\nconst pushTableToDiagram = (state: State, table: EditTable): void => {\n    const { diagram, done, refMap, tableMap } = state;\n    if (done.get(table.id) === true) return;\n    diagram.tables.push(table);\n    refMap.get(table.id)?.forEach((ref) => {\n        if (diagram.refs.includes(ref)) return;\n        diagram.refs.push(ref);\n    });\n    done.set(table.id, true);\n    (refMap.get(table.id) ?? []).forEach((ref) => {\n        const fromTable = tableMap.get(ref.from.table);\n        const toTable = tableMap.get(ref.to.table);\n        if (fromTable === undefined || toTable === undefined)\n            throw Error(`\"fromTable\" or \"toTable\" is undefined`);\n        pushTableToDiagram(state, fromTable);\n        pushTableToDiagram(state, toTable);\n    });\n};\n\n/**\n * Split a Diagram into a group of diagrams where each diagram only contains\n * nodes that are connected to each other (from one node can go to another).\n */\nexport const splitDiagram = (bigDiagram: EditDiagram): LayoutDiagram[] => {\n    // Sub diagrams split from bigDiagram\n    const diagrams: LayoutDiagram[] = [];\n    // Tables that are put into a sub diagram\n    const done = new Map<number, boolean>();\n\n    // Table id to instance for quick reference\n    const tableMap = new Map<number, EditTable>();\n    bigDiagram.tables.forEach((table) => {\n        tableMap.set(table.id, table);\n    });\n\n    // Table id to related refs for quick reference\n    const refMap = new Map<number, EditRef[]>();\n    bigDiagram.refs.forEach((ref) => {\n        const [from, to] = [ref.from.table, ref.to.table];\n        refMap.set(from, (refMap.get(from) ?? []).concat(ref));\n        refMap.set(to, (refMap.get(to) ?? []).concat(ref));\n    });\n\n    bigDiagram.tables.forEach((table) => {\n        if (done.get(table.id) === true) return;\n        const size = { width: 0, height: 0 }; // Will provide later\n        const diagram: LayoutDiagram = { tables: [], refs: [], size };\n        pushTableToDiagram({ diagram, done, tableMap, refMap }, table);\n        diagrams.push(diagram);\n    });\n\n    diagrams.forEach((diagram) => {\n        applyDagreeLayout(diagram);\n    });\n\n    return diagrams;\n};\n","import * as Edit from \"diagram/edit/edit\";\nimport { DiagramSize } from \"diagram/edit/layout\";\nimport { applyDagreeLayout } from \"./dagree\";\nimport { getMasonryLayout } from \"./masonry\";\nimport { mergeDiagram } from \"./merge\";\nimport { splitDiagram } from \"./split\";\n\n/**\n * Like EditDiagram but only contains enough data for layout purpose. Most\n * notably there is no \"columns\".\n */\nexport interface LayoutDiagram {\n    refs: Edit.EditRef[];\n    tables: Edit.EditTable[];\n    size: DiagramSize;\n}\n\n// Split -> Dagree -> Masonry -> Merge\nexport const applyAutoLayout = (\n    originalDiagram: Edit.EditDiagram\n): Edit.EditDiagram => {\n    // Split the diagram into sub diagrams\n    let diagrams = splitDiagram(originalDiagram);\n    // Arrange each diagram with dagree\n    diagrams = diagrams.map(applyDagreeLayout);\n    // Arrange sub diagrams into a big canvas\n    const masonry = getMasonryLayout(diagrams);\n    // Merge sub diagrams back into one diagram\n    return mergeDiagram({ originalDiagram, masonry, diagrams });\n};\n","import * as Raw from \"diagram/diagram\";\nimport * as Edit from \"diagram/edit/edit\";\nimport { applyAutoLayout } from \"diagram/layout/layout\";\n\n// Prepared maps from table's [name, schema] to EDIT ids to speed up EditRef\n// conversion\ntype Ids = { table: number; rows: Map<string, number> };\ntype IdsMap = Map<string, Ids>; // string here is \"<schema> . <name>\"\n\nconst makeIdsMap = (\n    fallbackSchema: string,\n    tables: Edit.EditTable[]\n): IdsMap => {\n    const idsMap = new Map<string, Ids>();\n    tables.forEach((table) => {\n        const rows = new Map<string, number>();\n        table.value.rows.forEach((row) => void rows.set(row.value.id, row.id));\n        const schema = table.value.schema ?? fallbackSchema;\n        const tuple = `${schema} . ${table.value.name}`;\n        idsMap.set(tuple, { table: table.id, rows });\n    });\n    return idsMap;\n};\n\nconst makeRefSide = (\n    fallbackSchema: string,\n    map: IdsMap,\n    side: Raw.RefSide\n): Edit.EditRefSide => {\n    const schema = side.schema ?? fallbackSchema;\n    const ids = map.get(`${schema} . ${side.name}`);\n    if (ids === undefined) throw Error(`Table Ids \"${side.name}\" not found`);\n    const rows = side.rows.map((editId) => {\n        const realId = ids.rows.get(editId);\n        if (realId === undefined) throw Error(`Row id \"${editId}\" not found`);\n        return realId;\n    });\n    return { table: ids.table, rows };\n};\n\nconst makeTable = (raw: Raw.Item, index: number): Edit.EditTable => {\n    const rows = raw.rows.map((value, id) => ({ id, value }));\n    const { name, id, schema } = raw;\n    const value: Edit.EditTableValue = { rows, name, id, schema };\n    const position = { top: 0, left: 0 }; // we will provide below\n    return { value, position, id: index };\n};\n\nconst makeColumn = (raw: Raw.Column, index: number): Edit.EditColumn => {\n    return { id: index, value: raw };\n};\n\nconst makeRef = (schema: string, idsMap: IdsMap) => {\n    return (raw: Raw.Ref, index: number): Edit.EditRef => ({\n        id: index,\n        from: makeRefSide(schema, idsMap, raw.from),\n        to: makeRefSide(schema, idsMap, raw.to),\n    });\n};\n\nexport const makeEditFromDiagram = (diagram: Raw.Diagram): Edit.EditDiagram => {\n    const schema = diagram.schema;\n    const columns: Edit.EditColumn[] = diagram.columns.map(makeColumn);\n    const tables: Edit.EditTable[] = diagram.items.map(makeTable);\n    const idsMap = makeIdsMap(schema, tables);\n    const refs: Edit.EditRef[] = diagram.refs.map(makeRef(schema, idsMap));\n    const size = { width: 0, height: 0 };\n    const edit: Edit.EditDiagram = { tables, refs, columns, size, schema };\n    return applyAutoLayout(edit);\n};\n","import Ajv from \"ajv\";\nimport { Diagram } from \"diagram/diagram\";\nimport schema from \"./schema.json\";\n\nconst ajv = new Ajv({ strictDefaults: true, strictKeywords: true });\nconst ajvValidate = ajv.compile(schema);\n\nexport const validateSchema = (data: Diagram) => {\n    const valid = ajvValidate(data);\n    if (valid) return true;\n    const { errors } = ajvValidate;\n    throw SyntaxError(ajv.errorsText(errors, { dataVar: \"diagram\" }));\n};\n","import { Diagram, Item, RefSide } from \"../diagram\";\n\nclass SemanticError extends Error {\n    constructor(message: string) {\n        super(message);\n        this.name = \"SemanticError\";\n    }\n}\n\nconst eRef = (name: string, target: string) => {\n    return new SemanticError(`${name} has an invalid reference to ${target}`);\n};\n\nconst isSameSchema = (diagram: Diagram, side: RefSide, item: Item): boolean => {\n    const a = side.schema ?? diagram.schema;\n    const b = item.schema ?? diagram.schema;\n    return a === b;\n};\n\nconst validateRefSide = (diagram: Diagram, side: RefSide, index: number) => {\n    const table = diagram.items.find((item) => {\n        return item.name === side.name && isSameSchema(diagram, side, item);\n    });\n    if (!table) throw eRef(`Ref #${index}`, `table \"${side.name}\"`);\n    side.rows.forEach((rowId) => {\n        if (table.rows.some((row) => row.id === rowId)) return;\n        throw eRef(`Ref #${index}.rows`, `row \"${rowId}\"`);\n    });\n};\n\nconst validateRowsIds = (item: Item) => {\n    const ids = item.rows.map((row) => row.id);\n    if (new Set(ids).size === ids.length) return;\n    throw Error(`tables.${item.id}.rows.ids are not unique`);\n};\n\nconst validateItemsIds = (diagram: Diagram) => {\n    const ids = diagram.items.map((item) => item.id);\n    if (new Set(ids).size === ids.length) return;\n    throw Error(\"items.ids are not unique\");\n};\n\nexport const validateSemantic = (diagram: Diagram) => {\n    // tables\n    validateItemsIds(diagram);\n    diagram.items.forEach((item) => {\n        validateRowsIds(item);\n    });\n    // refs\n    diagram.refs.forEach((ref, index) => {\n        validateRefSide(diagram, ref.from, index);\n        validateRefSide(diagram, ref.to, index);\n    });\n};\n","const getGenericId = <T>(ids: T[], makeId: (counter: number) => T): T => {\n    const set = new Set(ids);\n    let counter = 1;\n    let id = makeId(counter);\n    while (set.has(id)) {\n        counter = counter + 1;\n        id = makeId(counter);\n    }\n    return id;\n};\n\nexport const getStringId = (ids: string[], prefix: string) =>\n    getGenericId(ids, (counter) =>\n        counter === 1 ? prefix : `${prefix}_${counter}`\n    );\n\nexport const getNumberId = (ids: number[]) =>\n    getGenericId(ids, (counter) => counter);\n","import { EditColumn, EditTable, EditRow } from \"diagram/edit/edit\";\nimport { DiagramReducer } from \"../reducer\";\nimport { getStringId, getNumberId } from \"../id\";\n\nexport interface AddRowPayload {\n    tableId: number;\n}\n\ntype Payload = AddRowPayload;\n\nexport const getDefaultField = (column: EditColumn) => {\n    switch (column.value.type) {\n        case \"boolean\":\n            return false;\n        case \"string\":\n            return \"\";\n    }\n};\n\nexport const getDefaultRow = (rows: EditRow[]): EditRow => {\n    const valueIds = rows.map((row) => row.value.id);\n    return {\n        id: getNumberId(rows.map((row) => row.id)),\n        value: { id: getStringId(valueIds, \"column\") },\n    };\n};\n\nconst updateTable = (payload: Payload, columns: EditColumn[]) => {\n    return (table: EditTable): EditTable => {\n        if (table.id !== payload.tableId) return table;\n        const row = getDefaultRow(table.value.rows);\n        const rows = table.value.rows.concat(row);\n        return { ...table, value: { ...table.value, rows } };\n    };\n};\n\nexport const addRow: DiagramReducer<Payload> = (diagram, payload) => {\n    const update = updateTable(payload, diagram.columns);\n    return { ...diagram, tables: diagram.tables.map(update) };\n};\n","import { TABLE_CLIENT_WIDTH, TABLE_MARGIN_DOUBLE } from \"app/table/utils\";\nimport * as Edit from \"diagram/edit/edit\";\nimport { DiagramSize, TablePosition } from \"diagram/edit/layout\";\nimport { getNumberId, getStringId } from \"../id\";\nimport { DiagramReducer } from \"../reducer\";\nimport { getDefaultRow } from \"../row/add\";\n\nexport interface AddTablePayload {\n    id?: number;\n}\n\ntype Payload = AddTablePayload;\n\nconst toMaxLeft = (prev: number, table: Edit.EditTable) =>\n    Math.max(table.position.left, prev);\n\nconst leftToRight = TABLE_CLIENT_WIDTH + TABLE_MARGIN_DOUBLE;\n\n// For now we will just put it on the right side of the most right table\nexport const getTableNewPosition = (\n    tables: Edit.EditTable[]\n): TablePosition => {\n    const maxLeft = tables.reduce(toMaxLeft, 0);\n    return { top: TABLE_MARGIN_DOUBLE, left: maxLeft + leftToRight };\n};\n\nconst getNewSize = (\n    size: DiagramSize,\n    position: TablePosition\n): DiagramSize => {\n    const width = Math.max(size.width, position.left + leftToRight);\n    return width === size.width ? size : { ...size, width };\n};\n\nexport const addTable: DiagramReducer<Payload> = (diagram, payload) => {\n    // value\n    const valueIds = diagram.tables.map((table) => table.value.id);\n    const name = getStringId(valueIds, \"table\");\n    const row = getDefaultRow([]);\n    // edit table\n    const table: Edit.EditTable = {\n        id: payload.id ?? getNumberId(diagram.tables.map((table) => table.id)),\n        value: { name, id: name, schema: \"new\", rows: [row] },\n        position: getTableNewPosition(diagram.tables),\n    };\n    return {\n        ...diagram,\n        tables: diagram.tables.concat(table),\n        size: getNewSize(diagram.size, table.position),\n    };\n};\n","import { Diagram } from \"diagram/diagram\";\nimport { makeEditFromDiagram } from \"diagram/edit/convert/to\";\nimport { validateSchema } from \"diagram/schema/schema\";\nimport { validateSemantic } from \"diagram/schema/semantic\";\nimport { DiagramReducer } from \"../reducer\";\nimport { appendDiagram } from \"./append\";\n\nexport interface ParseJsonPayload {\n    text: string;\n    isAppend: boolean;\n}\n\ntype Payload = ParseJsonPayload;\n\nconst getErrorMessage = (error: any): string => {\n    if (!(error instanceof Error)) throw error;\n    return [\n        \"There was an error while parsing your json:\\n\",\n        `${error.name}: ${error.message}`,\n    ].join(\" \");\n};\n\n/** text (json) => Diagram => EditDiagram */\nexport const parseJson: DiagramReducer<Payload> = (prev, payload) => {\n    try {\n        const diagram = JSON.parse(payload.text) as Diagram;\n        validateSchema(diagram);\n        validateSemantic(diagram);\n        const target = makeEditFromDiagram(diagram);\n        if (!payload.isAppend) return target;\n        return appendDiagram(prev, target);\n    } catch (error) {\n        window.alert(getErrorMessage(error));\n        return prev;\n    }\n};\n","import { EditDiagram } from \"diagram/edit/edit\";\nimport { getNumberId } from \"../id\";\nimport { getTableNewPosition } from \"../table/add\";\nimport { TablePosition, DiagramSize } from \"diagram/edit/layout\";\nimport { TABLE_MARGIN_DOUBLE } from \"app/table/utils\";\n\nexport const appendDiagram = (\n    original: EditDiagram,\n    target: EditDiagram\n): EditDiagram => {\n    if (original.columns.length !== target.columns.length)\n        throw Error(\"Cannot merge diagrams with different columns\");\n\n    const ids = original.tables.map((t) => t.id);\n\n    // @TODO should not have this fix\n    const offset = getTableNewPosition(original.tables);\n    offset.top = offset.top - TABLE_MARGIN_DOUBLE;\n    offset.left = offset.left - TABLE_MARGIN_DOUBLE;\n\n    const tables = [...original.tables];\n    target.tables.forEach((table) => {\n        // @TODO this is slow because we need to create new ids everytime\n        // a faster way should be letting getId to accept Set\n        const id = getNumberId(ids);\n        ids.push(id); // Avoid using this id next time\n        const position: TablePosition = {\n            top: table.position.top + offset.top,\n            left: table.position.left + offset.left,\n        };\n        tables.push({ ...table, id, position });\n    });\n\n    const width = offset.left + target.size.width;\n    const size: DiagramSize = { ...original.size, width };\n    return { ...original, tables, size };\n};\n","import { DiagramReducer } from \"../reducer\";\n\nexport interface RemoveRefPayload {\n    id: number;\n}\n\nexport interface RemoveMultipleRefsPayload {\n    ids: number[];\n}\n\ntype Payload = RemoveRefPayload;\ntype MultiplePayload = RemoveMultipleRefsPayload;\n\nexport const removeRef: DiagramReducer<Payload> = (diagram, payload) => {\n    const refs = diagram.refs.filter((ref) => ref.id !== payload.id);\n    return { ...diagram, refs };\n};\n\ntype MultipleReducer = DiagramReducer<MultiplePayload>;\nexport const removeMultipleRefs: MultipleReducer = (diagram, payload) => {\n    let next = diagram;\n    payload.ids.forEach((id) => {\n        next = removeRef(next, { id });\n    });\n    return next;\n};\n","import { DiagramReducer } from \"../reducer\";\nimport { addRef, AddRefPayload } from \"./add\";\nimport {\n    removeMultipleRefs,\n    RemoveMultipleRefsPayload,\n    removeRef,\n    RemoveRefPayload,\n} from \"./remove\";\n\nexport type DiagramRefActions =\n    | { type: \"add-ref\"; payload: AddRefPayload }\n    | { type: \"remove-ref\"; payload: RemoveRefPayload }\n    | { type: \"remove-multiple-refs\"; payload: RemoveMultipleRefsPayload };\n\nexport const diagramRefReducer: DiagramReducer = (diagram, action) => {\n    switch (action.type) {\n        case \"add-ref\":\n            return addRef(diagram, action.payload);\n        case \"remove-ref\":\n            return removeRef(diagram, action.payload);\n        case \"remove-multiple-refs\":\n            return removeMultipleRefs(diagram, action.payload);\n        default:\n            return diagram;\n    }\n};\n","import { EditRef } from \"diagram/edit/edit\";\nimport { DiagramReducer } from \"../reducer\";\nimport { getNumberId } from \"../id\";\n\ninterface AddRefSide {\n    table: number;\n    rows: number[];\n}\n\nexport interface AddRefPayload {\n    from: AddRefSide;\n    to: AddRefSide;\n}\n\ntype Payload = AddRefPayload;\n\nconst isFromPayload = (ref: EditRef, payload: Payload): boolean =>\n    ref.from.table === payload.from.table &&\n    ref.from.rows.some((id) => payload.from.rows.includes(id));\n\nexport const addRef: DiagramReducer<Payload> = (diagram, payload) => {\n    // Must remove related ref(s) before adding the new one\n    const refs = diagram.refs.filter((ref) => !isFromPayload(ref, payload));\n    // New ref\n    const prevIds = diagram.refs.map((ref) => ref.id);\n    const ref = { ...payload, id: getNumberId(prevIds) };\n    refs.push(ref);\n    return { ...diagram, refs };\n};\n","import { EditRef, EditRefSide, EditTable } from \"diagram/edit/edit\";\nimport { DiagramReducer } from \"../reducer\";\n\nexport interface RemoveRowPayload {\n    tableId: number;\n    rowId: number;\n}\n\ntype Payload = RemoveRowPayload;\n\nconst isSideRelated = (payload: Payload, side: EditRefSide): boolean =>\n    side.table === payload.tableId && side.rows.includes(payload.rowId);\n\nconst isRelated = (payload: Payload, ref: EditRef): boolean =>\n    isSideRelated(payload, ref.from) || isSideRelated(payload, ref.to);\n\nconst updateTable = (payload: Payload) => (table: EditTable): EditTable => {\n    if (table.id !== payload.tableId) return table;\n    const rows = table.value.rows.filter((row) => row.id !== payload.rowId);\n    return { ...table, value: { ...table.value, rows } };\n};\n\nexport const removeRow: DiagramReducer<Payload> = (diagram, payload) => {\n    const tables = diagram.tables.map(updateTable(payload));\n    let refs = diagram.refs.filter((ref) => !isRelated(payload, ref));\n    if (refs.length === diagram.refs.length) refs = diagram.refs;\n    return { ...diagram, tables, refs };\n};\n","import { EditDiagram, EditRow, EditTable } from \"diagram/edit/edit\";\nimport { DiagramReducer } from \"../reducer\";\n\nexport interface UpdateRowPayload {\n    tableId: number;\n    rowId: number;\n    property: string;\n    value: string;\n}\n\ntype Payload = UpdateRowPayload;\n\nconst updateEditRow = (payload: Payload) => (row: EditRow): EditRow => {\n    if (row.id !== payload.rowId) return row;\n    const value = { ...row.value }; // EditRow.value or Diagram.Row\n    value[payload.property] = payload.value;\n    return { ...row, value };\n};\n\nconst updateTable = (payload: Payload) => (table: EditTable): EditTable => {\n    if (table.id !== payload.tableId) return table;\n    const rows = table.value.rows.map(updateEditRow(payload));\n    return { ...table, value: { ...table.value, rows } };\n};\n\nconst isSame = (diagram: EditDiagram, payload: Payload): boolean => {\n    const { tableId, rowId, property: attribute, value } = payload;\n    const row = diagram.tables\n        .find((table) => table.id === tableId) // table\n        ?.value.rows.find((row) => row.id === rowId); // row\n    if (!row) throw Error(`Row \"${tableId}.${rowId}\" not found`);\n    return row.value[attribute] === value;\n};\n\nexport const updateRow: DiagramReducer<Payload> = (diagram, payload) => {\n    if (isSame(diagram, payload)) return diagram;\n    const tables = diagram.tables.map(updateTable(payload));\n    return { ...diagram, tables };\n};\n","import { EditRef } from \"diagram/edit/edit\";\nimport { DiagramReducer } from \"../reducer\";\n\nexport interface RemoveTablePayload {\n    id: number;\n}\n\nexport interface RemoveMultipleTablesPayload {\n    ids: number[];\n}\n\ntype Payload = RemoveTablePayload;\ntype MultiplePayload = RemoveMultipleTablesPayload;\n\nconst isRelated = (payload: Payload, ref: EditRef): boolean =>\n    ref.from.table === payload.id || ref.to.table === payload.id;\n\nexport const removeTable: DiagramReducer<Payload> = (diagram, payload) => {\n    const tables = diagram.tables.filter((table) => table.id !== payload.id);\n    const refs = diagram.refs.filter((ref) => !isRelated(payload, ref));\n    return { ...diagram, tables, refs };\n};\n\ntype MultipleReducer = DiagramReducer<MultiplePayload>;\nexport const removeMultipleTables: MultipleReducer = (diagram, payload) => {\n    let next = diagram;\n    payload.ids.forEach((id) => {\n        next = removeTable(next, { id });\n    });\n    return next;\n};\n","import { EditTable } from \"diagram/edit/edit\";\nimport { DiagramReducer } from \"../reducer\";\n\nexport interface UpdateTableNamePayload {\n    id: number;\n    name: string;\n}\n\ntype Payload = UpdateTableNamePayload;\n\nconst updateName = (payload: Payload) => (table: EditTable): EditTable => {\n    if (table.id !== payload.id) return table;\n    return { ...table, value: { ...table.value, name: payload.name } };\n};\n\nexport const updateTableName: DiagramReducer<Payload> = (diagram, payload) => {\n    const tables = diagram.tables.map(updateName(payload));\n    return { ...diagram, tables };\n};\n","import { DiagramReducer } from \"../reducer\";\nimport { addTable, AddTablePayload } from \"./add\";\nimport { setTablePosition, SetTablePositionPayload } from \"./position\";\nimport {\n    removeMultipleTables,\n    RemoveMultipleTablesPayload,\n    removeTable,\n    RemoveTablePayload,\n} from \"./remove\";\nimport { updateTableName, UpdateTableNamePayload } from \"./update-name\";\n\nexport type DiagramTableActions =\n    | { type: \"remove-table\"; payload: RemoveTablePayload }\n    | { type: \"remove-multiple-tables\"; payload: RemoveMultipleTablesPayload }\n    | { type: \"add-table\"; payload: AddTablePayload }\n    | { type: \"set-table-position\"; payload: SetTablePositionPayload }\n    | { type: \"update-table-name\"; payload: UpdateTableNamePayload };\n\nexport const diagramTableReducer: DiagramReducer = (diagram, action) => {\n    switch (action.type) {\n        case \"add-table\":\n            return addTable(diagram, action.payload);\n        case \"remove-table\":\n            return removeTable(diagram, action.payload);\n        case \"remove-multiple-tables\":\n            return removeMultipleTables(diagram, action.payload);\n        case \"update-table-name\":\n            return updateTableName(diagram, action.payload);\n        case \"set-table-position\":\n            return setTablePosition(diagram, action.payload);\n        default:\n            return diagram;\n    }\n};\n","import { TablePosition } from \"diagram/edit/layout\";\nimport { DiagramReducer } from \"../reducer\";\n\nexport interface SetTablePositionPayload {\n    id: number;\n    position: TablePosition;\n}\n\ntype Reducer = DiagramReducer<SetTablePositionPayload>;\n\nexport const setTablePosition: Reducer = (diagram, payload) => ({\n    ...diagram,\n    tables: diagram.tables.map((table) => {\n        if (table.id !== payload.id) return table;\n        return { ...table, position: payload.position };\n    }),\n});\n","import React from \"react\";\nimport { addExternalFn } from \"external/external\";\n\nexport type Platform = \"web\" | \"mac\";\n\nconst webDomains = [\"localhost\", \"diagramplus.com\"];\n\nconst initial: Platform = (() => {\n    if (webDomains.includes(window.location.hostname)) return \"web\";\n    if (window.location.hostname.startsWith(\"192.168.1\")) return \"web\";\n    if (navigator.platform.toLowerCase().includes(\"mac\")) return \"mac\";\n    return \"web\";\n})();\n\nexport const PlatformContext = React.createContext<Platform>(initial);\n\n/**\n * The platform the app is running on. This is not navigator.platform, but to\n * separate between running directly in browsers and embedded in desktop apps\n */\nexport const usePlatform = () => {\n    const platform: Platform = React.useContext(PlatformContext);\n    return platform;\n};\n\nconst registerExternal = addExternalFn(\"setPlatform\");\n\nexport const usePlatformProvider = (): Platform => {\n    const [platform, setPlatform] = React.useState<Platform>(initial);\n    React.useEffect(() => {\n        const external = (text: Platform): void => void setPlatform(text);\n        registerExternal(external);\n    }, []);\n    return platform;\n};\n","import { makeEditFromDiagram } from \"diagram/edit/convert/to\";\nimport { EditDiagram } from \"diagram/edit/edit\";\n\nexport const emptyDiagram: EditDiagram = makeEditFromDiagram({\n    columns: [\n        { id: \"0\", name: \"name\", type: \"string\" },\n        { id: \"1\", name: \"type\", type: \"string\" },\n        { id: \"2\", name: \"nullable\", type: \"boolean\" },\n    ],\n    schema: \"main\",\n    items: [],\n    refs: [],\n});\n\nexport const fallbackDiagram: EditDiagram = makeEditFromDiagram({\n    columns: [\n        { id: \"0\", name: \"name\", type: \"string\" },\n        { id: \"1\", name: \"type\", type: \"string\" },\n        { id: \"2\", name: \"nullable\", type: \"boolean\" },\n    ],\n    schema: \"primary\",\n    items: [\n        {\n            id: \"employees\",\n            name: \"employees\",\n            rows: [\n                {\n                    id: \"emp_no\",\n                    name: \"emp_no\",\n                    type: \"int(11)\",\n                    nullable: \"FALSE\",\n                },\n                {\n                    id: \"birth_date\",\n                    name: \"birth_date\",\n                    type: \"date\",\n                    nullable: \"TRUE\",\n                },\n                {\n                    id: \"first_name\",\n                    name: \"first_name\",\n                    type: \"varchar(14)\",\n                    nullable: \"TRUE\",\n                },\n                {\n                    id: \"last_name\",\n                    name: \"last_name\",\n                    type: \"varchar(16)\",\n                    nullable: \"TRUE\",\n                },\n            ],\n        },\n        {\n            id: \"departments\",\n            name: \"departments\",\n            schema: \"secondary\",\n            rows: [\n                {\n                    id: \"dept_no\",\n                    name: \"dept_no\",\n                    type: \"char(4)\",\n                    nullable: \"FALSE\",\n                },\n                {\n                    id: \"dept_name\",\n                    name: \"dept_name\",\n                    type: \"varchar(40)\",\n                    nullable: \"FALSE\",\n                },\n            ],\n        },\n        {\n            id: \"dept_emp\",\n            name: \"dept_emp\",\n            rows: [\n                {\n                    id: \"dept_no\",\n                    name: \"dept_no\",\n                    type: \"char(4)\",\n                    nullable: \"FALSE\",\n                },\n                {\n                    id: \"emp_no\",\n                    name: \"emp_no\",\n                    type: \"int(11)\",\n                    nullable: \"FALSE\",\n                },\n                {\n                    id: \"from_date\",\n                    name: \"from_date\",\n                    type: \"date\",\n                    nullable: \"TRUE\",\n                },\n                {\n                    id: \"to_date\",\n                    name: \"to_date\",\n                    type: \"date\",\n                    nullable: \"TRUE\",\n                },\n            ],\n        },\n    ],\n    refs: [\n        {\n            from: { name: \"dept_emp\", schema: \"primary\", rows: [\"dept_no\"] },\n            to: { name: \"departments\", schema: \"secondary\", rows: [\"dept_no\"] },\n        },\n        {\n            from: { name: \"dept_emp\", rows: [\"emp_no\"] },\n            to: { name: \"employees\", rows: [\"emp_no\"] },\n        },\n    ],\n});\n","import {\n    AppStorage,\n    StorageContext,\n} from \"@tableplus/toolkit/src/storage/storage\";\nimport { EditDiagram } from \"diagram/edit/edit\";\nimport React from \"react\";\nimport { usePlatform } from \"utils/platform\";\nimport { emptyDiagram, fallbackDiagram } from \"./fallback\";\n\nconst STORAGE_KEY = \"diagram\";\n\nconst parseErrorMessage = [\n    \"There was an error while parsing the locally saved diagram. The app will \",\n    \"now fallback to a sample diagram.\\n\\n\",\n    \"Your previous diagram is still available in your localStorage under the \",\n    `key \"${STORAGE_KEY}-invalid\". Please contact us if you need help `,\n    \"retrieving it.\",\n].join(\"\");\n\nconst getDiagram = (storage: AppStorage): EditDiagram => {\n    const stored = storage.getItem(STORAGE_KEY);\n    if (stored === null) return fallbackDiagram;\n    try {\n        return JSON.parse(stored);\n    } catch {\n        storage.setItem(`${STORAGE_KEY}-invalid`, stored);\n        window.alert(parseErrorMessage);\n        return fallbackDiagram;\n    }\n};\n\nconst setDiagram = (storage: AppStorage, diagram: EditDiagram) => {\n    storage.setItem(STORAGE_KEY, JSON.stringify(diagram));\n};\n\ninterface DiagramStorageState {\n    get: () => EditDiagram;\n    set: (diagram: EditDiagram) => void;\n}\n\nexport const useDiagramStorage = (): DiagramStorageState => {\n    const storage = React.useContext(StorageContext);\n    if (storage === null) throw Error(\"Storage context not found\");\n    const platform = usePlatform();\n\n    return React.useMemo(() => {\n        return platform === \"web\"\n            ? {\n                  get: () => getDiagram(storage),\n                  set: (diagram: EditDiagram) => setDiagram(storage, diagram),\n              }\n            : {\n                  get: () => emptyDiagram,\n                  set: () => {},\n              };\n    }, [storage, platform]);\n};\n","import * as React from \"react\";\nimport { UndoAction, UndoState } from \"./undo\";\n\ninterface Props {\n    history: UndoState<any>;\n    dispatch: React.Dispatch<UndoAction>;\n}\n\nconst makeListener = (props: Props) => (event: KeyboardEvent) => {\n    if (!event.ctrlKey && !event.metaKey) return;\n    if (event.target instanceof HTMLInputElement) return;\n    if (event.target instanceof HTMLTextAreaElement) return;\n    switch (event.key) {\n        case \"z\": {\n            if (props.history.past.length === 0) return;\n            return props.dispatch({ type: \"undo\" });\n        }\n        case \"Z\":\n        case \"y\": {\n            if (props.history.future.length === 0) return;\n            return props.dispatch({ type: \"redo\" });\n        }\n    }\n};\n\nexport const useDiagramUndoShortcut = (props: Props) => {\n    const { history, dispatch } = props;\n    React.useEffect(() => {\n        const listener = makeListener({ history, dispatch });\n        document.addEventListener(\"keyup\", listener);\n        return () => document.removeEventListener(\"keyup\", listener);\n    }, [history, dispatch]);\n};\n","import React from \"react\";\nimport { EditDiagram } from \"../edit/edit\";\nimport { useDiagramExternal } from \"./external/external\";\nimport { DiagramAction, diagramReducer } from \"./reducer/reducer\";\nimport { useDiagramStorage } from \"./storage/storage\";\nimport { useDiagramUndoShortcut } from \"./undo/shortcut\";\nimport * as Undo from \"./undo/undo\";\n\nexport interface DiagramState {\n    history: Undo.UndoState<EditDiagram>;\n    dispatch: React.Dispatch<DiagramAction | Undo.UndoAction>;\n}\n\nconst undoReducer = Undo.createUndoReducer(diagramReducer);\n\nexport const useDiagram = (): DiagramState => {\n    const storage = useDiagramStorage();\n    const init = () => Undo.createUndoInitial(storage.get());\n    const [history, dispatch] = React.useReducer(undoReducer, undefined, init);\n\n    useDiagramExternal(history.present, dispatch);\n    useDiagramUndoShortcut({ history, dispatch });\n\n    const { set: storageSet } = storage;\n    React.useEffect(() => {\n        storageSet(history.present);\n    }, [history.present, storageSet]);\n\n    return { history, dispatch };\n};\n","import { EditDiagram } from \"../../edit/edit\";\nimport { DiagramLayoutAction, diagramLayoutReducer } from \"./layout/layout\";\nimport { DiagramParseActions, diagramParseReducer } from \"./parse/parse\";\nimport { DiagramRefActions, diagramRefReducer } from \"./ref/ref\";\nimport { DiagramRowActions, diagramRowReducer } from \"./row/row\";\nimport { DiagramTableActions, diagramTableReducer } from \"./table/table\";\n\nexport type DiagramReducer<T = DiagramAction> = (\n    diagram: EditDiagram,\n    arg: T\n) => EditDiagram;\n\nexport type DiagramAction =\n    | DiagramTableActions\n    | DiagramRowActions\n    | DiagramRefActions\n    | DiagramLayoutAction\n    | DiagramParseActions;\n\nexport const diagramReducer: DiagramReducer = (prev, action) => {\n    let next = prev;\n    next = diagramTableReducer(next, action);\n    next = diagramRowReducer(next, action);\n    next = diagramRefReducer(next, action);\n    next = diagramParseReducer(next, action);\n    next = diagramLayoutReducer(next, action);\n    return next;\n};\n","import { DiagramReducer } from \"../reducer\";\nimport { addRow, AddRowPayload } from \"./add\";\nimport { removeRow, RemoveRowPayload } from \"./remove\";\nimport { updateRow, UpdateRowPayload } from \"./update\";\n\nexport type DiagramRowActions =\n    | { type: \"add-row\"; payload: AddRowPayload }\n    | { type: \"remove-row\"; payload: RemoveRowPayload }\n    | { type: \"update-row\"; payload: UpdateRowPayload }\n\nexport const diagramRowReducer: DiagramReducer = (diagram, action) => {\n    switch (action.type) {\n        case \"add-row\":\n            return addRow(diagram, action.payload);\n        case \"remove-row\":\n            return removeRow(diagram, action.payload);\n        case \"update-row\":\n            return updateRow(diagram, action.payload);\n        default:\n            return diagram;\n    }\n};\n","import { applyAutoLayout } from \"diagram/layout/layout\";\nimport { DiagramReducer } from \"../reducer\";\n\nexport interface SetDiagramLayoutPayload {\n    type: \"auto\";\n}\n\nexport type DiagramLayoutAction = {\n    type: \"set-layout\";\n    payload: SetDiagramLayoutPayload;\n};\n\nexport const diagramLayoutReducer: DiagramReducer = (diagram, action) => {\n    switch (action.type) {\n        case \"set-layout\":\n            switch (action.payload.type) {\n                case \"auto\":\n                    return applyAutoLayout(diagram);\n                default:\n                    return diagram;\n            }\n        default:\n            return diagram;\n    }\n};\n","import { DiagramReducer } from \"../reducer\";\nimport { parseJson, ParseJsonPayload } from \"./json\";\n\nexport type DiagramParseActions = {\n    type: \"parse-json\";\n    payload: ParseJsonPayload;\n};\n\nexport const diagramParseReducer: DiagramReducer = (diagram, action) => {\n    switch (action.type) {\n        case \"parse-json\":\n            return parseJson(diagram, action.payload);\n        default:\n            return diagram;\n    }\n};\n","export const getEdgeElementId = (edgeId: number) => `edge . ${edgeId}`;\n\nexport const getEdgeElement = (edgeId: number): SVGGElement => {\n    const element = document.getElementById(getEdgeElementId(edgeId));\n    if (element instanceof SVGGElement) return element;\n    throw Error(\"Element is not SVGGElement\");\n};\n\ntype Type = \"path-main\" | \"from\" | \"to\" | \"highlight\";\ntype Fn<T> = (edgeId: number, type: Type, index?: number) => T;\n\nexport const getEdgeSubElementId: Fn<string> = (edgeId, type, index) =>\n    `edge . ${edgeId} . ${type} . ${index ?? 0}`;\n\nexport const getEdgeSubElement: Fn<SVGElement> = (edgeId, type, index) => {\n    const id = getEdgeSubElementId(edgeId, type, index);\n    const element = document.getElementById(id);\n    if (element instanceof SVGElement) return element;\n    throw Error(\"Element is not SVGElement\");\n};\n","import { EditEdge } from \"diagram/edit/edit\";\nimport * as React from \"react\";\nimport s from \"./edge.module.scss\";\nimport { EdgePoint, EdgePointsEnd } from \"./state/point\";\nimport { getEdgeSubElementId } from \"./utils\";\n\ninterface Props {\n    edge: EditEdge;\n    points: EdgePointsEnd;\n}\n\nexport const getEdgeFromAttributes = (point: EdgePoint) => ({\n    cx: point.x.toString(),\n    cy: point.y.toString(),\n});\n\nexport const EdgeFrom = (props: Props) => (\n    <>\n        {props.points.inners.map((point, index) => (\n            <circle\n                key={index}\n                id={getEdgeSubElementId(props.edge.id, \"from\", index)}\n                className={s.from}\n                {...getEdgeFromAttributes(point)}\n                r=\"4\"\n            />\n        ))}\n    </>\n);\n","export const getRowElementId = (tableId: number, rowId: number) =>\n    `row . ${tableId} . ${rowId}`;\n\ntype RowElement = HTMLDivElement;\n\nexport const getRowElement = (\n    tableId: number,\n    rowId: number\n): RowElement | null => {\n    const element = document.getElementById(getRowElementId(tableId, rowId));\n    if (element instanceof HTMLDivElement) return element;\n    return null;\n};\n","import { getRowElement } from \"app/row/dom\";\nimport { getTableElement } from \"app/table/utils\";\nimport { EditEdge, EditEdgeSide, EditTable } from \"diagram/edit/edit\";\nimport { TablePosition } from \"diagram/edit/layout\";\n\nexport interface EdgeBox {\n    top: number;\n    left: number;\n    right: number;\n}\n\nexport interface EdgeBoxes {\n    from: EdgeBox[];\n    to: EdgeBox[];\n}\n\nconst getOffsetUntil = (target: HTMLElement, container: Element) => {\n    let [top, left, element] = [0, 0, target];\n    do {\n        [top, left] = [top + element.offsetTop, left + element.offsetLeft];\n        const parent = element.offsetParent;\n        if (!(parent instanceof HTMLElement)) break;\n        element = parent;\n    } while (element !== container);\n    return { top, left };\n};\n\nconst getEdgeSideBoxes = (\n    edge: EditEdgeSide,\n    tablePosition: TablePosition\n): EdgeBox[] => {\n    const { top: tableTop, left: tableLeft } = tablePosition;\n    const table = getTableElement(edge.table);\n    return edge.rows.map((rowId) => {\n        const row = getRowElement(edge.table, rowId);\n        if (row !== null) {\n            // If row is rendered then use row\n            const { top: rowTop, left: rowLeft } = getOffsetUntil(row, table);\n            const top = rowTop + tableTop + row.clientHeight / 2;\n            const left = rowLeft + tableLeft;\n            return { top, left, right: left + row.clientWidth };\n        } else {\n            // If row is not rendered then use center of table\n            return {\n                top: tableTop + table.clientHeight / 2,\n                left: tableLeft,\n                right: tableLeft + table.clientWidth,\n            };\n        }\n    });\n};\n\ninterface Props {\n    edge: EditEdge;\n    fromTable: EditTable;\n    toTable: EditTable;\n}\n\nexport const getEdgeBoxes = (props: Props): EdgeBoxes => ({\n    from: getEdgeSideBoxes(props.edge.from, props.fromTable.position),\n    to: getEdgeSideBoxes(props.edge.to, props.toTable.position),\n});\n","import { getTableElement } from \"app/table/utils\";\nimport { EditEdge } from \"diagram/edit/edit\";\nimport * as React from \"react\";\nimport ResizeObserverPolyfill from \"resize-observer-polyfill\";\n\nconst SafeResizeObserver = window.ResizeObserver ?? ResizeObserverPolyfill;\n\nconst mutationCb = (setChanged: () => void): MutationCallback => (records) => {\n    records.forEach((record) => {\n        if (record.type !== \"attributes\") return;\n        if (record.attributeName !== \"data-is-visible\") return;\n        setChanged();\n    });\n};\n\nconst resizeCb = (setChanged: () => void): ResizeObserverCallback => () => {\n    setChanged();\n};\n\nconst mutationInit = { attributeFilter: [\"data-is-visible\"] };\n\nexport const useEdgeObserve = (edge: EditEdge): object => {\n    // Watch for non-react dependencies (e.g. DOM rendering)\n    const [changed, setChanged] = React.useState({});\n    React.useLayoutEffect(() => {\n        const from = getTableElement(edge.from.table);\n        const to = getTableElement(edge.to.table);\n        const set = () => setChanged({});\n        // resize\n        const resize = new SafeResizeObserver(resizeCb(set));\n        resize.observe(from);\n        resize.observe(to);\n        // mutation\n        const mutation = new MutationObserver(mutationCb(set));\n        mutation.observe(from, mutationInit);\n        mutation.observe(to, mutationInit);\n        return () => {\n            mutation.disconnect();\n            resize.disconnect();\n        };\n    }, [edge]);\n\n    return changed;\n};\n","import { EdgePoint, EdgePoints } from \"./point\";\n\n/**\n * This model is not a source of data as it contains duplicated information\n * (e.g. \"length\" can be derived from \"d\"). In fact, the whole interface is a\n * derived data from an \"edge\" (which is a source of truth).\n *\n * Therefore, the interface should be read-only and used to aid rendering only.\n */\nexport interface EdgePath {\n    /** The main path that connects first \"from.row\" to first \"to.row\" */\n    main: string;\n    /** Length of the main path */\n    length: number;\n    /** Connect from outer to from inners */\n    from: string;\n    /** Connect to outer to to inners */\n    to: string;\n}\n\nconst getPathD = (points: EdgePoint[]): string => {\n    if (points.length === 0) return \"\";\n    if (points.length === 1) throw Error(\"points.length must be 0 or 2+\");\n    return [\n        `M${points[0].x},${points[0].y}`,\n        ...points.slice(1).map((point) => `L${point.x},${point.y}`),\n    ].join(\" \");\n};\n\nconst getPathLength = (points: EdgePoint[]): number =>\n    points.reduce((prev, point, index) => {\n        if (index === 0) return 0;\n        const { x: x1, y: y1 } = point;\n        const { x: x2, y: y2 } = points[index - 1];\n        return prev + Math.sqrt(Math.pow(x1 - x2, 2) + Math.pow(y1 - y2, 2));\n    }, 0);\n\nexport const getEdgePath = (points: EdgePoints): EdgePath => {\n    const { from, mid, to } = points;\n    // prettier-ignore\n    const mainPoints = [from.inners[0], ...mid, to.inners[0]];\n    const fromPoints = from.inners.slice(1).flatMap((p) => [p, from.outer]);\n    const toPoints = to.inners.slice(1).flatMap((p) => [p, to.outer]);\n\n    return {\n        main: getPathD(mainPoints),\n        length: getPathLength(mainPoints),\n        from: getPathD(fromPoints),\n        to: getPathD(toPoints),\n    };\n};\n","import { EdgeBox, EdgeBoxes } from \"./box\";\nimport { avoidMidCollision, EdgesMids } from \"./mid\";\nimport { EditEdge } from \"diagram/edit/edit\";\n\n// TL;DR: From Box (top, left) to Point (x, y)!\n\nexport interface EdgePoint {\n    x: number;\n    y: number;\n}\n\ntype Side = \"left\" | \"right\";\n\n/**\n * Points of \"from\" and \"to\" (where an Edge starts and ends)\n *\n * Let's say a path is drawn from id1 and id2 rows (composite keys). In this\n * case, the path will start from B and C, then join at A, then go outside of\n * the table:\n *\n *       . . . . . . . . . . . . . .\n *       .\n *       .   |------------------|\n *       .   |    user table    |\n *       .   |------------------|\n *       A   B  id1       uuid  |\n *       .   C  id2       uuid  |\n *\n * A:       outer\n * B & C:   inners\n */\nexport interface EdgePointsEnd {\n    inners: EdgePoint[];\n    outer: EdgePoint;\n    side: Side;\n}\n\n/** A complete set of points to draw an Edge */\nexport interface EdgePoints {\n    from: EdgePointsEnd;\n    mid: EdgePoint[];\n    to: EdgePointsEnd;\n}\n\n/** Avoid line going into or along the border of a table */\nconst SAFE_SPACE = 32;\n\nconst toPoint = (side: Side) => (box: EdgeBox): EdgePoint => ({\n    x: side === \"left\" ? box.left : box.right,\n    y: box.top,\n});\n\nconst getOuterPoint = (inners: EdgePoint[], side: Side): EdgePoint => ({\n    x: inners[0].x + (side === \"right\" ? 1 : -1) * SAFE_SPACE,\n    y: inners[0].y,\n});\n\n/**\n * Decide which side of a table should we draw from. For simplicity this\n * returns EdgePoints but with empty \"mid\". The \"mid\" will be provide later.\n */\nconst getEndPoints = (boxes: EdgeBoxes): Omit<EdgePoints, \"mid\"> => {\n    // Horizontal-wise, we only need to compare one row\n    const [from, to] = [boxes.from[0], boxes.to[0]];\n    let [fromSide, toSide]: Side[] = [\"right\", \"right\"];\n    if (from.right <= to.left - SAFE_SPACE * 3) {\n        [fromSide, toSide] = [\"right\", \"left\"];\n    } else if (from.left >= to.right + SAFE_SPACE * 3) {\n        [fromSide, toSide] = [\"left\", \"right\"];\n    }\n    const fromInners = boxes.from.map(toPoint(fromSide));\n    const fromOuter = getOuterPoint(fromInners, fromSide);\n    const toInners = boxes.to.map(toPoint(toSide));\n    const toOuter = getOuterPoint(toInners, toSide);\n    return {\n        from: { inners: fromInners, side: fromSide, outer: fromOuter },\n        to: { inners: toInners, side: toSide, outer: toOuter },\n    };\n};\n\n/**\n * Return the middle points between 2 sides so that the path between them\n * doesn't have a diagonal line\n */\nconst getMidPoints = (points: Omit<EdgePoints, \"mid\">): EdgePoint[] => {\n    const { from, to } = points;\n    // When 2 ends are from different side, we need to pick mid points from the\n    // middle area between them:\n    //\n    //   A o---X\n    //         |\n    //         Y---> B\n    if (from.side !== to.side) {\n        const midX = (from.outer.x + to.outer.x) / 2;\n        return [\n            { x: midX, y: from.outer.y },\n            { x: midX, y: to.outer.y },\n        ];\n    }\n\n    // When 2 ends are from the same side, we need to pick a mid point from\n    // that side (to avoid the path from overlapping the target):\n    //\n    //   A o----X\n    //          |\n    //     B <--Y\n    //\n    // Note that we still need to produce two mid points even though the \"safe\"\n    // point can already be a mid point. This is requires for the \"avoid edge\n    // collision algorithm\" to work properly.\n    if (from.side === to.side) {\n        const midX = Math.max(from.outer.x, to.outer.x);\n        return [\n            { x: midX, y: from.outer.y },\n            { x: midX, y: to.outer.y },\n        ];\n    }\n    throw Error(\"never\");\n};\n\ninterface Props {\n    edgesMids?: EdgesMids;\n    edge: EditEdge;\n    boxes: EdgeBoxes;\n}\n\nexport const getEdgePoints = (props: Props): EdgePoints => {\n    const { edgesMids, edge, boxes } = props;\n    // Get points\n    const { from, to } = getEndPoints(boxes);\n    let mid = getMidPoints({ from, to });\n    // Avoid collision if possible\n    if (edgesMids !== undefined) {\n        mid = avoidMidCollision({ edgesMids, edge, midPoints: mid });\n    }\n    return { from, mid, to };\n};\n","import { EditEdge } from \"diagram/edit/edit\";\nimport * as React from \"react\";\n// import { PairMap } from \"./pair-map\";\nimport { EdgePoint } from \"./point\";\n\n// The purpose of this module is to avoid the situation where the \"x\" of \"mids\"\n// points of some edges are the same thus it's not clear which edge ends at\n// which row. For example, in the figure below, it's not clear whether A or C\n// is connected to X:\n//\n// A >-----+\n// B       |\n// C >-----+\n//         |\n//         |\n//         +----> X\n//         |      Y\n//         +----> Z\n//\n\ninterface UseEdgesMidsProps {\n    edges: EditEdge[];\n}\n\nexport interface EdgesMids {\n    edgesMap: Map<number, { mid: number; detail: EditEdge }>;\n    // usedMids: PairMap<number, Set<number>>;\n    usedMids: Set<number>;\n}\n\nexport const useEdgesMids = (props: UseEdgesMidsProps) => {\n    const edgesMids = React.useRef<EdgesMids>({\n        edgesMap: new Map(),\n        // usedMids: new PairMap(),\n        usedMids: new Set(),\n    });\n\n    // Remove outdated edges\n    React.useEffect(() => {\n        const ids = new Set(props.edges.map((edge) => edge.id));\n        edgesMids.current.edgesMap.forEach((edge, id) => {\n            if (ids.has(id)) return;\n            // id is not inside ids ===> removed ref\n            // edgesMids.current.usedMids\n            //     .get(edge.detail.from.table, edge.detail.to.table)\n            //     ?.delete(edge.mid);\n            edgesMids.current.usedMids.delete(edge.mid);\n            edgesMids.current.edgesMap.delete(id);\n        });\n    }, [props.edges]);\n\n    return edgesMids;\n};\n\ninterface CollisionProps {\n    edgesMids: EdgesMids;\n    edge: EditEdge;\n    midPoints: EdgePoint[];\n}\n\nconst getClosestAvailable = (set: Set<number>, start: number): number => {\n    let result = start;\n    let i = 1;\n    while (set.has(result)) {\n        result = start + i * 8;\n        i = i > 0 ? -i : -i + 1;\n    }\n    return result;\n};\n\nexport const avoidMidCollision = (props: CollisionProps): EdgePoint[] => {\n    const { edgesMap, usedMids } = props.edgesMids;\n    const next = props.midPoints[0].x; // All mid points have the same \"x\"\n    const prev = edgesMap.get(props.edge.id)?.mid;\n\n    // Nothing changes\n    if (prev === next) return props.midPoints;\n\n    // const [from, to] = [props.edge.from.table, props.edge.to.table];\n    // const set = usedMids.getOrSet(from, to, new Set());\n    const set = usedMids;\n\n    // Remove previous value if set\n    if (prev !== undefined) set.delete(prev);\n\n    if (set.has(next)) {\n        // Collision happens! Must choose new x\n        const x = getClosestAvailable(set, next);\n        edgesMap.set(props.edge.id, { detail: props.edge, mid: x });\n        set.add(x);\n        return props.midPoints.map((point) => ({ ...point, x }));\n    } else {\n        // No collision. Just record the new one and move on\n        edgesMap.set(props.edge.id, { detail: props.edge, mid: next });\n        set.add(next);\n        return props.midPoints;\n    }\n};\n","import { EditEdge, EditTable } from \"diagram/edit/edit\";\nimport * as React from \"react\";\nimport { getEdgeBoxes } from \"./box\";\nimport { useEdgeObserve } from \"./observe\";\nimport { EdgePath, getEdgePath } from \"./path\";\nimport { EdgePoints, getEdgePoints } from \"./point\";\nimport { debugLog } from \"utils/debug\";\nimport { EdgesMids } from \"./mid\";\n\ninterface EdgeState {\n    path: EdgePath;\n    points: EdgePoints;\n}\n\ninterface Props {\n    edge: EditEdge;\n    edgesMids?: React.MutableRefObject<EdgesMids>;\n    fromTable: EditTable;\n    toTable: EditTable;\n}\n\nexport const getEdgeState = (props: Props): EdgeState => {\n    debugLog(\"getEdgeState\");\n\n    const boxes = getEdgeBoxes(props);\n\n    const edgesMids = props.edgesMids?.current;\n    const edge = props.edge;\n    const points = getEdgePoints({ edgesMids, edge, boxes });\n\n    const path = getEdgePath(points);\n\n    return { points, path };\n};\n\nexport const useEdgeState = (props: Props): EdgeState | null => {\n    const { edge, fromTable, toTable, edgesMids } = props;\n\n    const changed = useEdgeObserve(edge);\n\n    // \"draw\" calculation depends on the result of rendered tables so it can\n    // not be calculated on edge's render but instead as an effect after\n    const [state, setState] = React.useState<EdgeState | null>(null);\n    const prev = React.useRef(0);\n    React.useLayoutEffect(() => {\n        window.clearTimeout(prev.current);\n        // setTimeout to fix a bug in Firefox where styles are not applied\n        // fully at the time when get element\n        prev.current = window.setTimeout(() => {\n            const props = { edge, fromTable, toTable, edgesMids };\n            const newState = getEdgeState(props);\n            setState(newState);\n        }, 0);\n        return () => window.clearTimeout(prev.current);\n    }, [edge, fromTable, toTable, edgesMids, changed]);\n    return state;\n};\n","import { EditEdge } from \"diagram/edit/edit\";\nimport * as React from \"react\";\nimport s from \"./edge.module.scss\";\nimport { EdgePoint, EdgePointsEnd } from \"./state/point\";\nimport { getEdgeSubElementId } from \"./utils\";\n\ninterface Props {\n    edge: EditEdge;\n    points: EdgePointsEnd;\n}\n\ntype Side = \"left\" | \"right\";\n\nconst rotateInner = (side: Side, x: number, y: number) =>\n    side === \"left\" ? `rotate(180, ${x}, ${y})` : \"\";\n\nexport const getEdgeToAttributes = (side: Side, { x, y }: EdgePoint) => ({\n    transform: rotateInner(side, x, y),\n    // the arrow point from right to left by default\n    points: [\n        `${x + 9},${y - 4}`, // top right\n        `${x + 9},${y + 4}`, // bottom right\n        `${x + 1},${y}`, // middle left\n    ].join(\" \"),\n});\n\nexport const EdgeTo = (props: Props) => (\n    <>\n        {props.points.inners.map((point, index) => (\n            <polygon\n                key={index}\n                className={s.to}\n                id={getEdgeSubElementId(props.edge.id, \"to\", index)}\n                {...getEdgeToAttributes(props.points.side, point)}\n            />\n        ))}\n    </>\n);\n","import { getEdgeFromAttributes } from \"app/edge/from\";\nimport { getEdgeState } from \"app/edge/state/state\";\nimport { getEdgeToAttributes } from \"app/edge/to\";\nimport { getEdgeSubElement } from \"app/edge/utils\";\nimport { RelatedEdge } from \"app/view/canvas/canvas\";\nimport { EditTable } from \"diagram/edit/edit\";\nimport { TablePosition } from \"diagram/edit/layout\";\nimport { DraggableEventHandler } from \"react-draggable\";\n\ninterface Props {\n    table: EditTable;\n    relatedEdges: RelatedEdge[];\n}\n\nconst setAttributes = (\n    attributes: { [key: string]: string },\n    element: Element\n) => {\n    Object.entries(attributes).forEach(([key, value]) => {\n        element.setAttribute(key, value);\n    });\n};\n\nconst updateEdgeElements = (table: EditTable) => (relatedEdge: RelatedEdge) => {\n    const { edge, table: related } = relatedEdge;\n    const isTo = edge.to.table === table.id;\n    const [fromTable, toTable] = isTo ? [related, table] : [table, related];\n    const { path, points } = getEdgeState({ edge, fromTable, toTable });\n    // Path\n    getEdgeSubElement(edge.id, \"path-main\").setAttribute(\"d\", path.main);\n    // From\n    points.from.inners.forEach((point, index) => {\n        const element = getEdgeSubElement(edge.id, \"from\", index);\n        const attributes = getEdgeFromAttributes(point);\n        setAttributes(attributes, element);\n    });\n    // To\n    points.to.inners.forEach((point, index) => {\n        const element = getEdgeSubElement(edge.id, \"to\", index);\n        const attributes = getEdgeToAttributes(points.to.side, point);\n        setAttributes(attributes, element);\n    });\n    // Highlight\n    try {\n        const highlight = getEdgeSubElement(edge.id, \"highlight\");\n        highlight.setAttribute(\"path\", \"\");\n    } catch (e) {\n        // Nothing, it's ok to fail when highlight is not rendered\n    }\n};\n\nexport const onTableDragMove = (props: Props): DraggableEventHandler => {\n    return (_event, data) => {\n        const position: TablePosition = {\n            left: props.table.position.left + data.x,\n            top: props.table.position.top + data.y,\n        };\n        const table = { ...props.table, position };\n        props.relatedEdges.forEach(updateEdgeElements(table));\n    };\n};\n","import { RelatedEdge } from \"app/view/canvas/canvas\";\nimport { SetSelectIds } from \"app/view/select/select\";\nimport { EditTable } from \"diagram/edit/edit\";\nimport { TablePosition } from \"diagram/edit/layout\";\nimport { DiagramAction } from \"diagram/state/reducer/reducer\";\nimport { DraggableEventHandler } from \"react-draggable\";\n\nconst round = (num: number) => Math.round(num / 16) * 16;\n\ninterface Props {\n    table: EditTable;\n    relatedEdges: RelatedEdge[];\n    setSelectId: SetSelectIds;\n    diagramDispatch: React.Dispatch<DiagramAction>;\n}\n\nexport const onTableDragStop = (props: Props): DraggableEventHandler => {\n    return (_event, data) => {\n        if (data.x === 0 && data.y === 0) return;\n        const position: TablePosition = {\n            left: round(props.table.position.left + data.x),\n            top: round(props.table.position.top + data.y),\n        };\n        props.diagramDispatch({\n            type: \"set-table-position\",\n            payload: { id: props.table.id, position },\n        });\n    };\n};\n","import * as React from \"react\";\n\nexport type SelectIdType = \"table\" | \"ref\";\n\nexport interface SelectId {\n    type: SelectIdType;\n    value: number;\n}\n\nexport type SetSelectIds = React.Dispatch<React.SetStateAction<SelectId[]>>;\n\ninterface SelectState {\n    ids: SelectId[];\n    setIds: SetSelectIds;\n    // Derived values\n    tables: Set<number>;\n    refs: Set<number>;\n}\n\nconst filterId = (ids: SelectId[], type: SelectIdType): number[] =>\n    ids.filter((id) => id.type === type).map((id) => id.value);\n\nexport const getSelectSets = (ids: SelectId[]) => ({\n    tables: new Set(filterId(ids, \"table\")),\n    refs: new Set(filterId(ids, \"ref\")),\n});\n\nexport const isSameSelectIds = (a: SelectId[], b: SelectId[]): boolean => {\n    if (a.length !== b.length) return false;\n    const { tables, refs } = getSelectSets(a);\n    return b.every((id) => {\n        if (id.type === \"table\" && tables.has(id.value)) return true;\n        if (id.type === \"ref\" && refs.has(id.value)) return true;\n        return false;\n    });\n};\n\nexport const useSelect = (): SelectState => {\n    const [ids, setIds] = React.useState<SelectId[]>([]);\n    const { tables, refs } = React.useMemo(() => getSelectSets(ids), [ids]);\n    return { ids, setIds, tables, refs };\n};\n","import React from \"react\";\nimport s from \"./add.module.scss\";\nimport { Button } from \"@moai/core\";\nimport { DiagramAction } from \"diagram/state/reducer/reducer\";\nimport { AddRowPayload } from \"diagram/state/reducer/row/add\";\nimport { icon } from \"@tableplus/toolkit/src/icon/icon\";\n\ninterface Props {\n    tableId: number;\n    diagramDispatch: React.Dispatch<DiagramAction>;\n}\n\nconst addRow = (props: Props) => () => {\n    const payload: AddRowPayload = { tableId: props.tableId };\n    props.diagramDispatch({ type: \"add-row\", payload });\n};\n\nexport const TableBodyAdd = (props: Props) => (\n    <div className={s.container}>\n        <Button\n            onClick={addRow(props)}\n            icon={icon.add}\n            size={Button.size.small}\n            style={Button.style.flat}\n            isFullWidth={true}\n        >\n            Add\n        </Button>\n    </div>\n);\n","import * as React from \"react\";\n\nconst focusChildControl = (wrapper: Element): void => {\n    const element = wrapper.querySelector(\"select,input,button,[tabindex]\");\n    if (element instanceof HTMLElement) return element.focus();\n    throw Error(\"No focusable element under row-control\");\n};\n\nconst isControl = (element: Element): boolean =>\n    element.classList.contains(\"row-control\");\n\nconst getSibling = (element: Element, isPrevious: boolean): Element | null =>\n    isPrevious ? element.previousElementSibling : element.nextElementSibling;\n\n// Skip hidden rows group\nconst getNextParent = (curr: Element, isUp: boolean): Element | null => {\n    const currParent = curr.closest(\".table-row\");\n    if (currParent === null) throw Error(\".table-row is null\");\n    let nextParent: Element | null = getSibling(currParent, isUp);\n    while (nextParent !== null) {\n        if (nextParent.classList.contains(\"table-row\")) return nextParent;\n        nextParent = getSibling(nextParent, isUp);\n    }\n    return null;\n};\n\ntype Index = \"first\" | \"last\" | number;\n\nconst getChildControl = (parent: Element, index: Index): Element => {\n    if (index === \"first\") {\n        const first = parent.querySelector(\".row-control\");\n        if (first !== null) return first;\n    } else {\n        const all = parent.querySelectorAll(\".row-control\");\n        const control = all[index === \"last\" ? all.length - 1 : index];\n        if (control !== undefined) return control;\n    }\n    throw Error(\".table-row doesn't have .row-control\");\n};\n\nconst getControlIndex = (curr: Element): number => {\n    const parent = curr.closest(\".table-row\");\n    if (parent === null) throw Error(\".table-row is null\");\n    const all = parent.querySelectorAll(\".row-control\");\n    const index = [...all].indexOf(curr);\n    if (index !== -1) return index;\n    throw Error(\"curr is not a child of parent\");\n};\n\nconst getNextControl = (curr: Element, key: string): Element | null => {\n    switch (key) {\n        case \"ArrowRight\":\n        case \"ArrowLeft\": {\n            const isLeft = key === \"ArrowLeft\";\n            const next = getSibling(curr, isLeft);\n            if (next !== null && isControl(next)) return next;\n            const nextParent = getNextParent(curr, isLeft);\n            if (nextParent === null) return null;\n            return getChildControl(nextParent, isLeft ? \"last\" : \"first\");\n        }\n        case \"ArrowUp\":\n        case \"ArrowDown\": {\n            const isUp = key === \"ArrowUp\";\n            const nextParent = getNextParent(curr, isUp);\n            if (nextParent === null) return null;\n            const index = getControlIndex(curr);\n            return getChildControl(nextParent, index);\n        }\n    }\n    return null;\n};\n\nconst navigate = (event: React.KeyboardEvent) => {\n    const { target } = event;\n    if (!(target instanceof HTMLElement)) return;\n    if (target instanceof HTMLInputElement) return;\n    // current control\n    const control = target.closest(\".row-control\");\n    if (control === null) return;\n    // Prevent parent (viewport)'s scrolling\n    event.preventDefault();\n    const next = getNextControl(control, event.key);\n    if (next === null) return;\n    focusChildControl(next);\n};\n\nexport const navigateViaArrowKeys = (event: React.KeyboardEvent) => {\n    switch (event.key) {\n        case \"ArrowUp\":\n        case \"ArrowRight\":\n        case \"ArrowDown\":\n        case \"ArrowLeft\":\n            return navigate(event);\n    }\n};\n","import { background, borderColor, Button, DivPx, Icon, text } from \"@moai/core\";\nimport { icon } from \"@tableplus/toolkit/src/icon/icon\";\nimport { SetState } from \"@tableplus/toolkit/src/types/types\";\nimport { EditColumn } from \"diagram/edit/edit\";\nimport React from \"react\";\nimport s from \"./header.module.scss\";\n\ninterface Props {\n    columns: EditColumn[];\n    isExpand: boolean;\n    setIsExpand: SetState<boolean>;\n}\n\nconst className = [\n    background.secondary,\n    borderColor.weak,\n    s.container,\n    text.muted,\n].join(\" \");\n\nconst renderColumn = (column: EditColumn, index: number) => {\n    const cls = [s.field, index === 1 ? s.rightField : \"\"].join(\" \");\n    return <div key={column.id} className={cls} children={column.value.name} />;\n};\n\nconst getExpandIcon = (isExpand: Boolean): string =>\n    isExpand ? icon.doubleChevronLeft : icon.doubleChevronRight;\n\nexport const TableBodyHeader = (props: Props) => (\n    <div className={className}>\n        <DivPx size={8} />\n\n        {/* PADDING */}\n        <div className={Button.size.small.main}>\n            <Icon path={icon.blank} size={Button.size.small.iconSize} />\n        </div>\n\n        {/* COLUMN */}\n        {props.columns\n            .slice(0, props.isExpand ? undefined : 2)\n            .map(renderColumn)}\n\n        {/* EXPAND */}\n        <Button\n            onClick={() => props.setIsExpand((b) => !b)}\n            style={Button.style.flat}\n            size={Button.size.small}\n            icon={getExpandIcon(props.isExpand)}\n        />\n\n        <DivPx size={8} />\n    </div>\n);\n","import { Button, Icon } from \"@moai/core\";\nimport { icon } from \"@tableplus/toolkit/src/icon/icon\";\nimport { EditRef } from \"diagram/edit/edit\";\nimport { DiagramAction } from \"diagram/state/reducer/reducer\";\nimport { AddRefPayload } from \"diagram/state/reducer/ref/add\";\nimport { RemoveRefPayload } from \"diagram/state/reducer/ref/remove\";\nimport React from \"react\";\nimport { DragSourceMonitor, useDrag } from \"react-dnd\";\nimport { getEmptyImage } from \"react-dnd-html5-backend\";\nimport { RowDragItem, RowDropResult } from \"../drag\";\nimport s from \"./source.module.scss\";\n\ninterface Props {\n    tableId: number;\n    rowId: number;\n    diagramDispatch: React.Dispatch<DiagramAction>;\n    edge: EditRef | null;\n}\n\nconst beginDrag = (props: Props) => {\n    if (props.edge === null) return;\n    const payload: RemoveRefPayload = { id: props.edge.id };\n    props.diagramDispatch({ type: \"remove-ref\", payload });\n};\n\nconst collectDrag = (props: Props, monitor: DragSourceMonitor) => {\n    if (monitor.isDragging() === false) return false;\n    if (monitor.getItemType() !== \"row\") return false;\n    const { tableId, rowId } = monitor.getItem() as RowDragItem;\n    return props.tableId === tableId && props.rowId === rowId;\n};\n\nconst endDrag = (props: Props, monitor: DragSourceMonitor) => {\n    const result = monitor.getDropResult() as null | RowDropResult;\n    if (result === null) return;\n    const payload: AddRefPayload = {\n        from: { table: props.tableId, rows: [props.rowId] },\n        to: { table: result.tableId, rows: [result.rowId] },\n    };\n    props.diagramDispatch({ type: \"add-ref\", payload });\n};\n\nexport const RowDragSource = (props: Props) => {\n    const elementRef = React.useRef<HTMLDivElement>(null);\n\n    const { rowId, tableId } = props;\n    const [isDragging, dragRefCallback, previewRef] = useDrag({\n        item: { type: \"row\", rowId, tableId, elementRef },\n        begin: () => beginDrag(props),\n        end: (_item, monitor) => endDrag(props, monitor),\n        collect: (monitor) => collectDrag(props, monitor),\n    });\n\n    React.useEffect(() => {\n        previewRef(getEmptyImage());\n    }, [previewRef]);\n\n    React.useEffect(() => {\n        dragRefCallback(elementRef);\n    }, [dragRefCallback]);\n\n    const [isHover, setIsHover] = React.useState(false);\n\n    const isActive = isDragging || isHover || props.edge !== null;\n    const iconNode = (\n        <Icon\n            path={isActive ? icon.selection : icon.circle}\n            size={Button.size.small.iconSize}\n        />\n    );\n\n    return (\n        <div\n            ref={elementRef}\n            className={s.container}\n            onMouseEnter={() => setIsHover(true)}\n            onMouseLeave={() => setIsHover(false)}\n        >\n            <div\n                className={[\n                    isDragging ? s.dragging : \"\",\n                    Button.style.flat.main,\n                    Button.size.small.main,\n                    \"react-draggable-cancel\",\n                ].join(\" \")}\n                children={iconNode}\n            />\n        </div>\n    );\n};\n","import { Select } from \"@moai/core\";\nimport * as React from \"react\";\nimport s from \"./boolean.module.css\";\n\ninterface Props {\n    value: string;\n    setValue: (value: string) => void;\n}\n\nconst TRUE_PREFIX = [\"T\", \"t\", \"1\", \"Y\", \"y\"]; // true, 1, yes\n\nconst isBoolean = (text: string): boolean =>\n    TRUE_PREFIX.includes(text.charAt(0));\n\nexport const RowInputBoolean = (props: Props) => (\n    <div className={[s.container].join(\" \")}>\n        <Select<boolean>\n            value={isBoolean(props.value) ? true : false}\n            setValue={(bool) => {\n                props.setValue(bool ? \"TRUE\" : \"FALSE\");\n            }}\n            options={[\n                { value: true, label: \"TRUE\" },\n                { value: false, label: \"FALSE\" },\n            ]}\n            style={Select.style.flat}\n            size={Select.size.small}\n        />\n    </div>\n);\n","/**\n * Whether the browser's focus is just leaving from an Input edit view. This\n * helps 2 things:\n * - Only set the next input string to edit mode if coming from another edit\n *   input via \"Tab\" key\n * - Allow keeping the \"edit\" flag when travelling through non-editable widgets\n *   like the remove button\n */\nconst ref = { current: false, timeout: 0 };\n\nexport const isJustLeftEdit = (): boolean => ref.current;\n\nexport const setJustLeftEdit = (): void => {\n    window.clearTimeout(ref.timeout);\n    ref.current = true;\n    ref.timeout = window.setTimeout(() => {\n        ref.current = false;\n    }, 500);\n};\n","import { Input, outline } from \"@moai/core\";\nimport * as React from \"react\";\nimport { isJustLeftEdit, setJustLeftEdit } from \"./leave\";\nimport s from \"./string.module.scss\";\n\ninterface Props {\n    value: string;\n    setValue: (value: string) => void;\n}\n\ninterface InternalProps extends Props {\n    isEdit: boolean;\n    setIsEdit: React.Dispatch<React.SetStateAction<boolean>>;\n    viewRef: React.RefObject<HTMLDivElement>;\n}\n\nconst focusView = (props: InternalProps) => {\n    window.setTimeout(() => {\n        const view = props.viewRef.current;\n        if (view === null) throw Error(\"View is null\");\n        view.focus();\n    }, 0); // Can only focus view after React's render\n};\n\nconst Edit = (props: InternalProps) => (\n    <div className={s.edit}>\n        <Input\n            key={props.value} // uncontrolled\n            defaultValue={props.value}\n            style={Input.style.flat}\n            size={Input.size.small}\n            autoFocus\n            onBlur={(event) => {\n                props.setValue(event.currentTarget.value);\n                props.setIsEdit(false);\n            }}\n            onKeyDown={(event) => {\n                if (event.key !== \"Tab\") return;\n                setJustLeftEdit();\n            }}\n            onKeyUp={(event) => {\n                if (event.key !== \"Enter\") return;\n                props.setValue(event.currentTarget.value);\n                props.setIsEdit(false);\n                focusView(props);\n            }}\n        />\n    </div>\n);\n\nconst viewClass = [\n    s.view,\n    outline.always,\n    Input.size.small.main,\n    \"react-draggable-cancel\",\n    \"row-input-string-view\",\n].join(\" \");\n\nconst ViewValue = ({ value }: { value: string }) => {\n    if (value.length !== 0) return <span>{value}</span>;\n    return <span className={s.empty}>&lt;empty&gt;</span>;\n};\n\nconst View = (props: InternalProps) => (\n    <div\n        tabIndex={0}\n        children={<ViewValue value={props.value} />}\n        className={viewClass}\n        onDoubleClick={() => {\n            props.setIsEdit(true);\n        }}\n        onFocus={() => {\n            if (isJustLeftEdit()) props.setIsEdit(true);\n        }}\n        onKeyUp={(event) => {\n            if (event.key !== \"Enter\") return;\n            props.setIsEdit(true);\n        }}\n        ref={props.viewRef}\n    />\n);\n\nexport const RowInputString = (props: Props) => {\n    const [isEdit, setIsEdit] = React.useState(false);\n    const viewRef = React.useRef<HTMLDivElement>(null);\n    const internal: InternalProps = { ...props, isEdit, setIsEdit, viewRef };\n\n    return (\n        <div className={[s.container].join(\" \")}>\n            {isEdit ? <Edit {...internal} /> : <View {...internal} />}\n        </div>\n    );\n};\n","import { text } from \"@moai/core\";\nimport { EditColumn, EditRow } from \"diagram/edit/edit\";\nimport { DiagramAction } from \"diagram/state/reducer/reducer\";\nimport { UpdateRowPayload } from \"diagram/state/reducer/row/update\";\nimport React from \"react\";\nimport { RowInputBoolean } from \"./boolean/boolean\";\nimport s from \"./field.module.scss\";\nimport { RowInputString } from \"./string/string\";\n\ninterface Props {\n    tableId: number;\n    row: EditRow;\n    column: EditColumn;\n    diagramDispatch: React.Dispatch<DiagramAction>;\n    isRight: boolean;\n}\n\nconst updateRowField = (props: Props) => (value: string) => {\n    const { tableId, row, column } = props;\n    const [property, rowId] = [column.value.name, row.id];\n    if (value === row.value[property]) return;\n    const payload: UpdateRowPayload = { tableId, rowId, property, value };\n    props.diagramDispatch({ type: \"update-row\", payload });\n};\n\ninterface RowInputProps {\n    value: string;\n    setValue: (value: string) => void;\n}\n\ntype RowInputComponent = (props: RowInputProps) => JSX.Element;\n\nconst getInput = (props: Props): RowInputComponent => {\n    const { type } = props.column.value;\n    switch (type) {\n        case \"boolean\":\n            return RowInputBoolean;\n        case \"string\":\n            return RowInputString;\n        default:\n            throw Error(`Unknown column type \"${type}\"`);\n    }\n};\n\nexport const RowFieldInput = (props: Props) => (\n    <div className={props.isRight ? `${s.right} ${text.muted}` : \"\"}>\n        {getInput(props)({\n            value: props.row.value[props.column.value.name] ?? \"\",\n            setValue: updateRowField(props),\n        })}\n    </div>\n);\n","import React from \"react\";\nimport { DiagramAction } from \"diagram/state/reducer/reducer\";\nimport { RemoveRowPayload } from \"diagram/state/reducer/row/remove\";\n\ninterface Params {\n    diagramDispatch: React.Dispatch<DiagramAction>;\n    tableId: number;\n    rowId: number;\n}\n\ntype Event = React.KeyboardEvent<HTMLDivElement>;\n\nconst dispatchRemoveRow = (params: Params) => {\n    const { tableId, rowId } = params;\n    const payload: RemoveRowPayload = { tableId, rowId };\n    params.diagramDispatch({ type: \"remove-row\", payload });\n};\n\nexport const useRowKeyUpListeners = (params: Params) => {\n    const isEmpty = React.useRef(false);\n    return {\n        onKeyDown: (event: Event) => {\n            if (![\"Delete\", \"Backspace\"].includes(event.key)) return;\n            if (!(event.target instanceof HTMLInputElement)) return;\n            isEmpty.current = event.target.value === \"\";\n        },\n        onKeyUp: (event: Event) => {\n            if (![\"Delete\", \"Backspace\"].includes(event.key)) return;\n            if (event.target instanceof HTMLInputElement) {\n                if (isEmpty.current) dispatchRemoveRow(params);\n            } else {\n                dispatchRemoveRow(params);\n            }\n        },\n    };\n};\n","import { Button } from \"@moai/core\";\nimport { icon } from \"@tableplus/toolkit/src/icon/icon\";\nimport { EditRow } from \"diagram/edit/edit\";\nimport { DiagramAction } from \"diagram/state/reducer/reducer\";\nimport { RemoveRowPayload } from \"diagram/state/reducer/row/remove\";\nimport React from \"react\";\nimport s from \"./remove.module.scss\";\n\ninterface Props {\n    tableId: number;\n    row: EditRow;\n    diagramDispatch: React.Dispatch<DiagramAction>;\n}\n\nconst removeRow = (props: Props) => () => {\n    const { tableId, row } = props;\n    const payload: RemoveRowPayload = { tableId, rowId: row.id };\n    props.diagramDispatch({ type: \"remove-row\", payload });\n};\n\nexport const RowRemoveButton = (props: Props) => (\n    <div className={[s.container].join(\" \")}>\n        <Button\n            onClick={removeRow(props)}\n            style={Button.style.flat}\n            size={Button.size.small}\n            icon={icon.remove}\n        />\n    </div>\n);\n","import { DivPx } from \"@moai/core\";\nimport { EditColumn, EditRef, EditRow } from \"diagram/edit/edit\";\nimport { DiagramAction } from \"diagram/state/reducer/reducer\";\nimport React from \"react\";\nimport { debugLog } from \"utils/debug\";\nimport { useRowDropTarget } from \"./drag/drop/drop\";\nimport { RowDragSource } from \"./drag/source/source\";\nimport { RowFieldInput } from \"./field/field\";\nimport { useRowKeyUpListeners } from \"./key\";\nimport { RowRemoveButton } from \"./remove/remove\";\nimport s from \"./row.module.scss\";\n\ninterface Props {\n    // row\n    row: EditRow;\n    edge: EditRef | null;\n    // table\n    tableId: number;\n    isEdit: boolean;\n    isExpand: boolean;\n    // diagram\n    columns: EditColumn[];\n    diagramDispatch: React.Dispatch<DiagramAction>;\n}\n\nconst RowPure = (props: Props) => {\n    debugLog(\"Table\", props.tableId, \"Row\", props.row.id, props.row.value.id);\n\n    const [isOver, dropRef] = useRowDropTarget({\n        tableId: props.tableId,\n        rowId: props.row.id,\n    });\n\n    return (\n        <div\n            {...useRowKeyUpListeners({\n                diagramDispatch: props.diagramDispatch,\n                tableId: props.tableId,\n                rowId: props.row.id,\n            })}\n            className={`${s.container} ${isOver ? s.over : \"\"}`}\n            ref={dropRef}\n        >\n            <DivPx size={8} />\n\n            {/* REMOVE */}\n            {props.isEdit && (\n                <div className=\"row-control\">\n                    <RowRemoveButton\n                        tableId={props.tableId}\n                        row={props.row}\n                        diagramDispatch={props.diagramDispatch}\n                    />\n                </div>\n            )}\n\n            {/* FIELDS */}\n            {props.columns\n                .slice(0, props.isExpand ? undefined : 2)\n                .map((column, index) => (\n                    <div className=\"row-control\" key={column.id}>\n                        <RowFieldInput\n                            tableId={props.tableId}\n                            row={props.row}\n                            column={column}\n                            diagramDispatch={props.diagramDispatch}\n                            isRight={index === 1}\n                        />\n                    </div>\n                ))}\n\n            {/* DRAG */}\n            {props.isEdit && (\n                <RowDragSource\n                    tableId={props.tableId}\n                    rowId={props.row.id}\n                    diagramDispatch={props.diagramDispatch}\n                    edge={props.edge}\n                />\n            )}\n\n            <DivPx size={8} />\n        </div>\n    );\n};\n\nexport const Row = React.memo(RowPure);\n","import { useDrop } from \"react-dnd\";\nimport { RowDropResult } from \"../drag\";\n\ninterface Params {\n    tableId: number;\n    rowId: number;\n}\n\nexport const useRowDropTarget = (params: Params) =>\n    useDrop({\n        accept: \"row\",\n        drop: () => {\n            const { tableId, rowId } = params;\n            const result: RowDropResult = { tableId, rowId };\n            return result;\n        },\n        collect: (monitor) => monitor.isOver(),\n    });\n","import { Background, Border, Button } from \"@moai/core\";\nimport { getRowElementId } from \"app/row/dom\";\nimport { Row } from \"app/row/row\";\nimport { RelatedEdge } from \"app/view/canvas/canvas\";\nimport { EditRow, EditColumn } from \"diagram/edit/edit\";\nimport { DiagramAction } from \"diagram/state/reducer/reducer\";\nimport * as React from \"react\";\nimport { EdgeFromRowMap, getTableRowsEdgeMap } from \"./edge-map\";\nimport { groupTableRows, TableRowsItem } from \"./group\";\n\nexport interface TableRowProps {\n    // table\n    tableId: number;\n    isTableEdit: boolean;\n    isTableExpand: boolean;\n    // diagram\n    columns: EditColumn[];\n    isRowsExpand: boolean;\n    relatedEdges: RelatedEdge[];\n    diagramDispatch: React.Dispatch<DiagramAction>;\n}\n\nexport interface TableRowsProps extends TableRowProps {\n    rows: EditRow[];\n}\n\nconst renderRow = (props: TableRowProps, edgeMap: EdgeFromRowMap) => {\n    return (row: EditRow) => (\n        <div\n            className=\"table-row\" // For keyboard navigation\n            id={getRowElementId(props.tableId, row.id)}\n            key={row.id}\n        >\n            <Row\n                // row\n                row={row}\n                edge={edgeMap.get(row.id) ?? null}\n                // table\n                tableId={props.tableId}\n                isEdit={props.isTableEdit}\n                isExpand={props.isTableExpand}\n                // diagram\n                columns={props.columns}\n                diagramDispatch={props.diagramDispatch}\n            />\n        </div>\n    );\n};\n\nconst HiddenRows = (props: { count: number; show: () => void }) => (\n    <Background color=\"secondary\">\n        <Border color=\"weak\" />\n        <div style={{ marginTop: -1 }} />\n        <Button\n            style={Button.style.flat}\n            size={Button.size.small}\n            isFullWidth\n            onClick={() => props.show()}\n            children={`${props.count} columns hidden`}\n        />\n        <div style={{ marginTop: -1 }} />\n        <Border color=\"weak\" />\n    </Background>\n);\n\nconst renderItem = (\n    props: TableRowProps,\n    edgeMap: EdgeFromRowMap,\n    isRowsExpand: boolean,\n    setIsRowExpand: React.Dispatch<React.SetStateAction<boolean>>\n) => (item: TableRowsItem, index: number): JSX.Element =>\n    Array.isArray(item) ? (\n        isRowsExpand ? (\n            <React.Fragment key={item[0].id}>\n                {item.map(renderRow(props, edgeMap))}\n            </React.Fragment>\n        ) : (\n            <HiddenRows\n                key={`hidden-${index}`}\n                count={item.length}\n                show={() => setIsRowExpand(true)}\n            />\n        )\n    ) : (\n        renderRow(props, edgeMap)(item)\n    );\n\nconst HideButton = (props: { hide: () => void }) => (\n    <Button\n        style={Button.style.flat}\n        size={Button.size.small}\n        isFullWidth\n        onClick={() => props.hide()}\n        children=\"Hide columns\"\n    />\n);\n\nexport const TableBodyRows = (props: TableRowsProps) => {\n    const [isRowsExpand, setIsRowsExpand] = React.useState(false);\n    const edgeMap = getTableRowsEdgeMap(props.tableId, props.relatedEdges);\n    const items: TableRowsItem[] = groupTableRows(props.rows, edgeMap);\n    const render = renderItem(props, edgeMap, isRowsExpand, setIsRowsExpand);\n    const canExpand = items.length !== props.rows.length;\n\n    React.useEffect(() => {\n        if (canExpand) setIsRowsExpand(props.isRowsExpand);\n    }, [props.isRowsExpand, canExpand]);\n\n    return (\n        <>\n            {items.map(render)}\n            {isRowsExpand && <HideButton hide={() => setIsRowsExpand(false)} />}\n        </>\n    );\n};\n","import { EditEdge } from \"diagram/edit/edit\";\nimport { RelatedEdge } from \"app/view/canvas/canvas\";\n\nexport type EdgeFromRowMap = Map<number, EditEdge>; // row id to edge from\n\nexport const getTableRowsEdgeMap = (\n    tableId: number,\n    edges: RelatedEdge[]\n): EdgeFromRowMap => {\n    const map: EdgeFromRowMap = new Map();\n    edges.forEach((edge) => {\n        if (edge.edge.from.table !== tableId) return;\n        edge.edge.from.rows.forEach((rowId) => {\n            map.set(rowId, edge.edge);\n        });\n    });\n    return map;\n};\n","import { EditRow } from \"diagram/edit/edit\";\nimport { MAX_ROWS_COUNT } from \"app/table/utils\";\nimport { EdgeFromRowMap } from \"./edge-map\";\n\nexport type TableRowsItem = EditRow | EditRow[];\n\nexport const groupTableRows = (\n    rows: EditRow[],\n    edgeMap: EdgeFromRowMap\n): TableRowsItem[] => {\n    // When slotCount reaches 0 then start grouping rows\n    let slotCount = MAX_ROWS_COUNT - edgeMap.size;\n    // Prepare\n    const items: TableRowsItem[] = [];\n    let prevGroup: EditRow[] = [];\n    // Push row or group rows\n    rows.forEach((row) => {\n        if (slotCount > 0 || edgeMap.has(row.id)) {\n            if (prevGroup.length !== 0) items.push(prevGroup);\n            prevGroup = [];\n            items.push(row);\n            slotCount = slotCount - 1;\n        } else {\n            prevGroup.push(row);\n        }\n    });\n    if (prevGroup.length !== 0) items.push(prevGroup);\n    // Return\n    return items;\n};\n","import { DivPx } from \"@moai/core\";\nimport { SetState } from \"@tableplus/toolkit/src/types/types\";\nimport { RelatedEdge } from \"app/view/canvas/canvas\";\nimport { EditColumn, EditTable } from \"diagram/edit/edit\";\nimport { DiagramAction } from \"diagram/state/reducer/reducer\";\nimport React from \"react\";\nimport { TableBodyAdd } from \"./add/add\";\nimport s from \"./body.module.scss\";\nimport { navigateViaArrowKeys } from \"./events/navigate\";\nimport { TableBodyHeader } from \"./header/header\";\nimport { TableBodyRows } from \"./rows/rows\";\n\ninterface Props {\n    // Table\n    table: EditTable;\n    // Edit\n    isEdit: boolean;\n    setIsEdit: SetState<boolean>;\n    // Diagram\n    columns: EditColumn[];\n    isRowsExpand: boolean;\n    diagramDispatch: React.Dispatch<DiagramAction>;\n    relatedEdges: RelatedEdge[];\n}\n\nconst onFocus = (props: Props) => (event: React.FocusEvent) => {\n    const related = event.relatedTarget as Node | null;\n    if (event.currentTarget.contains(related)) return;\n    if (event.target instanceof HTMLButtonElement) return;\n    props.setIsEdit(true);\n};\n\nexport const TableBody = (props: Props) => {\n    const [isExpand, setIsExpand] = React.useState(false);\n\n    React.useEffect(() => {\n        if (!props.isEdit) setIsExpand(false);\n    }, [props.isEdit]);\n\n    return (\n        <div className={s.container} onFocus={onFocus(props)}>\n            <DivPx size={8} />\n\n            {/* HEADER */}\n            {props.isEdit && (\n                <div className={s.header}>\n                    <TableBodyHeader\n                        columns={props.columns}\n                        isExpand={isExpand}\n                        setIsExpand={setIsExpand}\n                    />\n                </div>\n            )}\n\n            {/* BODY */}\n            <div onKeyDown={navigateViaArrowKeys}>\n                <TableBodyRows\n                    // rows\n                    rows={props.table.value.rows}\n                    // table\n                    tableId={props.table.id}\n                    isTableEdit={props.isEdit}\n                    isTableExpand={isExpand}\n                    // diagram\n                    columns={props.columns}\n                    isRowsExpand={props.isRowsExpand}\n                    relatedEdges={props.relatedEdges}\n                    diagramDispatch={props.diagramDispatch}\n                />\n            </div>\n\n            {/* FOOTER */}\n            {(props.isEdit || props.table.value.rows.length === 0) && (\n                <TableBodyAdd\n                    tableId={props.table.id}\n                    diagramDispatch={props.diagramDispatch}\n                />\n            )}\n\n            <DivPx size={8} />\n        </div>\n    );\n};\n","import { Input } from \"@moai/core\";\nimport { SetState } from \"@tableplus/toolkit/src/types/types\";\nimport { EditTable } from \"diagram/edit/edit\";\nimport { DiagramAction } from \"diagram/state/reducer/reducer\";\nimport { UpdateTableNamePayload } from \"diagram/state/reducer/table/update-name\";\nimport React from \"react\";\nimport s from \"./name.module.scss\";\nimport { TABLE_CLIENT_WIDTH } from \"app/table/utils\";\n\ninterface Props {\n    table: EditTable;\n    diagramDispatch: React.Dispatch<DiagramAction>;\n    setIsEdit: SetState<boolean>;\n}\n\ntype FocusEvent = React.FocusEvent<HTMLInputElement>;\n\nconst updateTableName = (props: Props, event: FocusEvent) => {\n    const { value } = event.currentTarget;\n    if (value === props.table.value.name) return;\n    const payload: UpdateTableNamePayload = { id: props.table.id, name: value };\n    props.diagramDispatch({ type: \"update-table-name\", payload });\n};\n\nexport const HeaderName = (props: Props) => {\n    // Because HeaderName is draggable, this helps us identify if a drag\n    // happened or just a click\n    const offset = React.useRef({ x: 0, y: 0 });\n\n    // This is the component's internal isEdit state, which decides whether to\n    // show an Input or a div. It's different from props.isEdit, which is\n    // the whole table's edit state\n    const [isEdit, setIsEdit] = React.useState(false);\n    return (\n        <div\n            className={s.container}\n            style={{\n                width: TABLE_CLIENT_WIDTH - 16,\n            }}\n        >\n            {isEdit ? (\n                <Input\n                    key={props.table.value.name} // uncontrolled\n                    defaultValue={props.table.value.name}\n                    onBlur={(event) => {\n                        updateTableName(props, event);\n                        setIsEdit(false);\n                    }}\n                    onFocus={() => {\n                        props.setIsEdit(false);\n                    }}\n                    style={Input.style.flat}\n                    size={Input.size.small}\n                    autoFocus\n                />\n            ) : (\n                <div\n                    className={[s.view, Input.size.small.main].join(\" \")}\n                    onMouseDown={(event) => {\n                        offset.current.x = event.clientX;\n                        offset.current.y = event.clientY;\n                    }}\n                    onClick={(event) => {\n                        const { x: x1, y: y1 } = offset.current;\n                        const { clientX: x2, clientY: y2 } = event;\n                        // Only enter edit mode if this is not a drag\n                        if (x1 === x2 && y1 === y2) setIsEdit(true);\n                    }}\n                >\n                    {props.table.value.name}\n                </div>\n            )}\n        </div>\n    );\n};\n","import { Button, background } from \"@moai/core\";\nimport { icon } from \"@tableplus/toolkit/src/icon/icon\";\nimport { DiagramAction } from \"diagram/state/reducer/reducer\";\nimport { RemoveTablePayload } from \"diagram/state/reducer/table/remove\";\nimport React from \"react\";\nimport s from \"./remove.module.css\";\n\ninterface Props {\n    tableId: number;\n    diagramDispatch: React.Dispatch<DiagramAction>;\n}\n\nexport const TableHeaderRemove = (props: Props) => (\n    <div className={[s.container, background.primary].join(\" \")}>\n        <Button\n            style={Button.style.flat}\n            onClick={() => {\n                const payload: RemoveTablePayload = { id: props.tableId };\n                props.diagramDispatch({ type: \"remove-table\", payload });\n            }}\n            icon={icon.cross}\n            size={Button.size.small}\n        />\n    </div>\n);\n","import { SetState } from \"@tableplus/toolkit/src/types/types\";\nimport { EditTable } from \"diagram/edit/edit\";\nimport { DiagramAction } from \"diagram/state/reducer/reducer\";\nimport React from \"react\";\nimport s from \"./header.module.scss\";\nimport { HeaderName } from \"./name/name\";\nimport { TableHeaderRemove } from \"./remove/remove\";\n\ninterface Props {\n    table: EditTable;\n    isEdit: boolean;\n    setIsEdit: SetState<boolean>;\n    diagramDispatch: React.Dispatch<DiagramAction>;\n}\n\nexport const TableHeader: React.FC<Props> = (props) => (\n    <div className={`${s.container} ${props.isEdit ? s.edit : \"\"}`}>\n        <div className={s.main}>\n            <HeaderName\n                table={props.table}\n                setIsEdit={props.setIsEdit}\n                diagramDispatch={props.diagramDispatch}\n            />\n            <div className={s.remove}>\n                <TableHeaderRemove\n                    tableId={props.table.id}\n                    diagramDispatch={props.diagramDispatch}\n                />\n            </div>\n        </div>\n    </div>\n);\n","import { SetState } from \"@tableplus/toolkit/src/types/types\";\n\n/** Turn off Edit mode on blur */\nexport const onTableBlur = (\n    isRowDragging: boolean,\n    setIsEdit: SetState<boolean>\n) => {\n    if (isRowDragging) return undefined;\n    return (event: React.FocusEvent<HTMLDivElement>) => {\n        const related = event.relatedTarget as Node | null;\n        if (event.currentTarget.contains(related)) return;\n        setIsEdit(false);\n    };\n};\n","import { background, Border, borderColor } from \"@moai/core\";\nimport { RowDragItem } from \"app/row/drag/drag\";\nimport { RelatedEdge } from \"app/view/canvas/canvas\";\nimport * as Select from \"app/view/select/select\";\nimport { EditColumn, EditTable } from \"diagram/edit/edit\";\nimport { DiagramAction } from \"diagram/state/reducer/reducer\";\nimport React from \"react\";\nimport { DragLayerMonitor, useDragLayer } from \"react-dnd\";\nimport { debugLog } from \"utils/debug\";\nimport { TableBody } from \"../body/body\";\nimport { TableHeader } from \"../header/header\";\nimport { onTableBlur } from \"./event\";\nimport s from \"./main.module.scss\";\n\nexport interface Props {\n    // Table\n    table: EditTable;\n    // Select\n    isSelected: boolean;\n    setSelectIds: Select.SetSelectIds;\n    // Diagram\n    isRowsExpand: boolean;\n    relatedEdges: RelatedEdge[];\n    columns: EditColumn[];\n    diagramDispatch: React.Dispatch<DiagramAction>;\n}\n\nconst getCls = (props: Props, isEdit: boolean) => {\n    const cls = [s.container, background.primary, borderColor.strong];\n    if (props.isSelected) cls.push(s.selected);\n    if (isEdit) cls.push(s.edit);\n    return cls.join(\" \");\n};\n\nconst isMyRow = (props: Props) => (monitor: DragLayerMonitor): boolean => {\n    const item = monitor.getItem();\n    if (item === null) return false;\n    if (item.type !== \"row\") return false;\n    const rowItem = item as RowDragItem;\n    return rowItem.tableId === props.table.id;\n};\n\nconst toEdgeId = (edge: RelatedEdge): Select.SelectId => ({\n    type: \"ref\",\n    value: edge.edge.id,\n});\n\nconst onFocus = (props: Props) => () => {\n    props.setSelectIds((prev) => {\n        const next: Select.SelectId[] = props.relatedEdges.map(toEdgeId);\n        next.push({ type: \"table\", value: props.table.id });\n        return Select.isSameSelectIds(prev, next) ? prev : next;\n    });\n};\n\nconst TableMainPure: React.FC<Props> = (props) => {\n    debugLog(\"TableMain\", props.table.id, props.table.value.id);\n    const [isEdit, setIsEdit] = React.useState(false);\n    const isRowDragging: boolean = useDragLayer(isMyRow(props));\n    return (\n        <div\n            className={getCls(props, isEdit)}\n            onBlur={onTableBlur(isRowDragging, setIsEdit)}\n            tabIndex={0} // Avoid losing edit mode when dragging\n            onFocus={onFocus(props)}\n        >\n            <TableHeader\n                table={props.table}\n                isEdit={isEdit}\n                setIsEdit={setIsEdit}\n                diagramDispatch={props.diagramDispatch}\n            />\n            <Border color=\"weak\" />\n            <div style={{ marginTop: -1 }} />\n            <TableBody\n                // table\n                table={props.table}\n                // Edit\n                isEdit={isEdit}\n                setIsEdit={setIsEdit}\n                // Diagram\n                isRowsExpand={props.isRowsExpand}\n                relatedEdges={props.relatedEdges}\n                diagramDispatch={props.diagramDispatch}\n                columns={props.columns}\n            />\n        </div>\n    );\n};\n\nexport const TableMain = React.memo(TableMainPure);\n","import { RelatedEdge } from \"app/view/canvas/canvas\";\nimport { SetSelectIds } from \"app/view/select/select\";\nimport { EditColumn, EditTable } from \"diagram/edit/edit\";\nimport { DiagramAction } from \"diagram/state/reducer/reducer\";\nimport React from \"react\";\nimport Draggable from \"react-draggable\";\nimport { debugLog } from \"utils/debug\";\nimport s from \"./active.module.css\";\nimport { onTableDragMove } from \"./drag/move\";\nimport { onTableDragStop } from \"./drag/stop\";\nimport { TableMain } from \"./main/main\";\n\ninterface Props {\n    table: EditTable;\n    // Diagram\n    isRowsExpand: boolean;\n    columns: EditColumn[];\n    diagramDispatch: React.Dispatch<DiagramAction>;\n    relatedEdges: RelatedEdge[];\n    // Select\n    isSelected: boolean;\n    setSelectId: SetSelectIds;\n    // View\n    zoom: number;\n}\n\nexport const TableActive = (props: Props) => {\n    debugLog(\"CanvasTable\");\n    const dragRef = React.useRef<HTMLDivElement>(null);\n    return (\n        <Draggable\n            position={{ x: 0, y: 0 }}\n            onDrag={onTableDragMove(props)}\n            onStop={onTableDragStop(props)}\n            nodeRef={dragRef}\n            scale={props.zoom}\n            cancel=\"input, button, select, .react-draggable-cancel\"\n        >\n            <div ref={dragRef} className={s.container}>\n                <TableMain\n                    table={props.table}\n                    // Select\n                    isSelected={props.isSelected}\n                    setSelectIds={props.setSelectId}\n                    // Diagram\n                    isRowsExpand={props.isRowsExpand}\n                    columns={props.columns}\n                    relatedEdges={props.relatedEdges}\n                    diagramDispatch={props.diagramDispatch}\n                />\n            </div>\n        </Draggable>\n    );\n};\n","import { background, borderColor } from \"@moai/core\";\nimport { EditTable } from \"diagram/edit/edit\";\nimport * as React from \"react\";\nimport { getTableEstimatedSize } from \"../utils\";\nimport s from \"./inactive.module.css\";\n\ninterface Props {\n    table: EditTable;\n    isRowsExpand: boolean;\n}\n\nconst cls = [s.container, background.primary, borderColor.strong].join(\" \");\n\nexport const TableInactive = (props: Props) => (\n    <div\n        className={cls}\n        style={getTableEstimatedSize(props.table, props.isRowsExpand)}\n    />\n);\n","import { RelatedEdge } from \"app/view/canvas/canvas\";\nimport { SetSelectIds } from \"app/view/select/select\";\nimport { EditColumn, EditTable } from \"diagram/edit/edit\";\nimport { DiagramAction } from \"diagram/state/reducer/reducer\";\nimport React from \"react\";\nimport { TableActive } from \"./active/active\";\nimport { TableInactive } from \"./inactive/inactive\";\nimport { getTableElementId } from \"./utils\";\n\ninterface Props {\n    // Table\n    table: EditTable;\n    // Diagram\n    diagramDispatch: React.Dispatch<DiagramAction>;\n    relatedEdges: RelatedEdge[];\n    columns: EditColumn[];\n    isRowsExpand: boolean;\n    // Select\n    isSelected: boolean;\n    setSelectId: SetSelectIds;\n    // View\n    viewportRef: React.RefObject<HTMLDivElement>;\n    zoom: number;\n    forceVisible: boolean;\n}\n\nconst observerCallback = (\n    setIsVisible: React.Dispatch<React.SetStateAction<boolean>>\n) => (entries: IntersectionObserverEntry[]) => {\n    entries.forEach((entry) => {\n        setIsVisible(entry.isIntersecting);\n    });\n};\n\nconst TablePure = (props: Props) => {\n    const ref = React.useRef<HTMLDivElement>(null);\n    const [selfVisible, setSelfVisible] = React.useState(false);\n\n    React.useEffect(() => {\n        const callback = observerCallback(setSelfVisible);\n        const observer = new IntersectionObserver(callback, {\n            threshold: 0,\n            root: props.viewportRef.current,\n        });\n        if (ref.current === null) throw Error(\"ref is null\");\n        observer.observe(ref.current);\n        return () => observer.disconnect();\n    }, [props.viewportRef]);\n\n    const isVisible = selfVisible || props.forceVisible;\n\n    return (\n        <div\n            id={getTableElementId(props.table.id)}\n            style={{\n                position: \"absolute\",\n                top: props.table.position.top,\n                left: props.table.position.left,\n                // Needs to be set here because this is top-level table\n                zIndex: props.isSelected ? 1 : 0,\n            }}\n            ref={ref}\n            // Temporary use to avoid using previous table size for new layout\n            data-name={props.table.value.name}\n            // Edges will watch this attribute to re-draw themselves\n            data-is-visible={isVisible}\n        >\n            {isVisible ? (\n                <TableActive\n                    table={props.table}\n                    // Diagram\n                    columns={props.columns}\n                    diagramDispatch={props.diagramDispatch}\n                    relatedEdges={props.relatedEdges}\n                    isRowsExpand={props.isRowsExpand}\n                    // Select\n                    isSelected={props.isSelected}\n                    setSelectId={props.setSelectId}\n                    // View\n                    zoom={props.zoom}\n                />\n            ) : (\n                <TableInactive\n                    isRowsExpand={props.isRowsExpand}\n                    table={props.table}\n                />\n            )}\n        </div>\n    );\n};\n\nexport const Table = React.memo(TablePure);\n","import { SelectPosition, SelectBox } from \"./drag\";\n\nexport const getDragBox = (\n    startRef: React.RefObject<SelectPosition>,\n    event: React.MouseEvent\n): SelectBox => {\n    const start = startRef.current;\n    if (start === null) throw Error(\"start is null\");\n    const current = {\n        left: event.nativeEvent.offsetX,\n        top: event.nativeEvent.offsetY,\n    };\n    const top = Math.min(start.top, current.top);\n    const right = Math.max(start.left, current.left);\n    const bottom = Math.max(start.top, current.top);\n    const left = Math.min(start.left, current.left);\n    const [width, height] = [right - left, bottom - top];\n    return { top, left, width, height };\n};\n\nexport const setOpacity = (element: HTMLDivElement, opacity: string): void => {\n    element.style.opacity = opacity;\n};\n\nconst emptyBox: SelectBox = { top: 0, left: 0, width: 0, height: 0 };\n\nexport const setSize = (element: HTMLDivElement, box: SelectBox): void => {\n    element.style.width = `${box.width}px`;\n    element.style.height = `${box.height}px`;\n    element.style.transform = `translate(${box.left}px, ${box.top}px)`;\n};\n\nexport const setDragBoxStyles = (\n    boxRef: React.RefObject<HTMLDivElement>,\n    box: SelectBox | \"start\" | \"stop\"\n): void => {\n    const { current: element } = boxRef;\n    if (element === null) throw Error(\"boxRef is null\");\n    if (box === \"start\") {\n        setSize(element, emptyBox);\n        setOpacity(element, \"1\");\n    } else if (box === \"stop\") {\n        setOpacity(element, \"0\");\n    } else {\n        setSize(element, box);\n    }\n};\n","import { getTableElement } from \"app/table/utils\";\nimport { EditDiagram, EditRef } from \"diagram/edit/edit\";\nimport { TablePosition } from \"diagram/edit/layout\";\nimport { SelectId, SelectIdType } from \"../../select\";\nimport { SelectBox } from \"./drag\";\n\nconst isBoxOverlap = (a: SelectBox, b: SelectBox) => {\n    // If one rectangle is on the left side of other\n    if (a.left > b.left + b.width) return false;\n    if (b.left > a.left + a.width) return false;\n    // If one rectangle is above the other\n    if (a.top > b.top + b.height) return false;\n    if (b.top > a.top + a.height) return false;\n    // Otherwise it overlaps\n    return true;\n};\n\nexport const isTableOverlap = (props: {\n    target: SelectBox;\n    position: TablePosition;\n    element: HTMLDivElement;\n}) => {\n    if (props.element.dataset.isVisible !== \"true\") return false;\n    // Get box of \"table\"\n    const { clientWidth: width, clientHeight: height } = props.element;\n    const { top, left } = props.position;\n    const current: SelectBox = { width, height, top, left };\n    // Compare and set\n    return isBoxOverlap(props.target, current);\n};\n\ninterface Props {\n    diagram: EditDiagram;\n}\n\nconst getOverlapTables = (props: Props, target: SelectBox): number[] => {\n    return props.diagram.tables\n        .filter((table) =>\n            isTableOverlap({\n                target,\n                position: table.position,\n                element: getTableElement(table.id),\n            })\n        )\n        .map((table) => table.id);\n};\n\nconst getOverlapRefs = (props: Props, tables: number[]): number[] => {\n    const set = new Set(tables);\n    const isRelated = (ref: EditRef) => {\n        return set.has(ref.from.table) || set.has(ref.to.table);\n    };\n    return props.diagram.refs.filter(isRelated).map((ref) => ref.id);\n};\n\nconst getIds = (ids: number[], type: SelectIdType) =>\n    ids.map((value) => ({ type, value }));\n\nexport const getOverlapIds = (props: Props, box: SelectBox): SelectId[] => {\n    const tables = getOverlapTables(props, box);\n    const refs = getOverlapRefs(props, tables);\n    return [...getIds(tables, \"table\"), ...getIds(refs, \"ref\")];\n};\n","import { getTableElement } from \"app/table/utils\";\nimport { EditDiagram } from \"diagram/edit/edit\";\nimport { SelectBox } from \"./drag\";\nimport { isTableOverlap } from \"./overlap\";\nimport { getEdgeElement } from \"app/edge/utils\";\n\nexport const DRAG_SELECT_CLASS = \"temp-selected\";\n\nconst setClass = (element: Element, isOverlap: boolean) => {\n    if (isOverlap) {\n        element.classList.add(DRAG_SELECT_CLASS);\n    } else {\n        element.classList.remove(DRAG_SELECT_CLASS);\n    }\n};\n\nexport const setTempSelect = (target: SelectBox, diagram: EditDiagram) => {\n    const selected = new Set<number>();\n    diagram.tables.forEach((table) => {\n        const element = getTableElement(table.id);\n        const { position } = table;\n        const isOverlap = isTableOverlap({ target, element, position });\n        if (isOverlap) selected.add(table.id);\n        setClass(element, isOverlap);\n    });\n    diagram.refs.forEach((ref) => {\n        const isOverlap =\n            selected.has(ref.from.table) || selected.has(ref.to.table);\n        const element = getEdgeElement(ref.id);\n        setClass(element, isOverlap);\n    });\n};\n\nexport const resetTempSelect = () => {\n    document.querySelectorAll(`.${DRAG_SELECT_CLASS}`).forEach((element) => {\n        element.classList.remove(DRAG_SELECT_CLASS);\n    });\n};\n","import { EditDiagram } from \"diagram/edit/edit\";\nimport React from \"react\";\nimport { debugLog } from \"utils/debug\";\nimport { SelectId, SetSelectIds } from \"../../select\";\nimport { getDragBox, setDragBoxStyles } from \"./box\";\nimport s from \"./drag.module.css\";\nimport { resetTempSelect, setTempSelect } from \"./element\";\nimport { getOverlapIds } from \"./overlap\";\n\nexport interface SelectBox {\n    top: number;\n    left: number;\n    width: number;\n    height: number;\n}\n\nexport interface SelectPosition {\n    top: number;\n    left: number;\n}\n\ninterface Props {\n    diagram: EditDiagram;\n    setSelectIds: SetSelectIds;\n}\ntype ContainerRef = React.RefObject<HTMLDivElement>;\n\nconst setContainerStyles = (ref: ContainerRef, isDragging: boolean): void => {\n    const { current: element } = ref;\n    if (element === null) throw Error(\"containerRef is null\");\n    // Win table's z index, which is 1\n    element.style.zIndex = isDragging ? \"2\" : \"0\";\n};\n\n// For stable identities\nconst emptyIds: SelectId[] = [];\n\nconst SelectDragLayerPure = (props: Props) => {\n    debugLog(\"CanvasSelectDragPure\");\n    const start = React.useRef<null | SelectPosition>(null);\n    const isDraggingRef = React.useRef(false);\n    const boxRef = React.useRef<HTMLDivElement>(null);\n    const containerRef = React.useRef<HTMLDivElement>(null);\n    const spaceLockRef = React.useRef<boolean>(false);\n    return (\n        <div\n            className={s.container}\n            tabIndex={0}\n            onKeyDown={(event: React.KeyboardEvent) => {\n                if (event.key === \" \") spaceLockRef.current = true;\n            }}\n            onKeyUp={(event: React.KeyboardEvent) => {\n                if (event.key === \" \") spaceLockRef.current = false;\n            }}\n            onMouseDown={(event: React.MouseEvent) => {\n                if (spaceLockRef.current === true) return;\n                const { offsetX, offsetY } = event.nativeEvent;\n                start.current = { left: offsetX, top: offsetY };\n                isDraggingRef.current = true;\n                // Set drag styles\n                setContainerStyles(containerRef, true);\n                setDragBoxStyles(boxRef, \"start\");\n                // Reset ids\n                props.setSelectIds(emptyIds);\n            }}\n            onMouseMove={(event: React.MouseEvent) => {\n                if (isDraggingRef.current === false) return;\n                const box = getDragBox(start, event);\n                // Set styles\n                setDragBoxStyles(boxRef, box);\n                // Set select state (but not set select ids to avoid React's\n                // re-renders)\n                setTempSelect(box, props.diagram);\n            }}\n            onMouseUp={(event: React.MouseEvent) => {\n                if (isDraggingRef.current === false) return;\n                isDraggingRef.current = false;\n                // Reset drag styles\n                resetTempSelect();\n                setContainerStyles(containerRef, false);\n                setDragBoxStyles(boxRef, \"stop\");\n                // Set ids\n                const box = getDragBox(start, event);\n                const ids = getOverlapIds({ diagram: props.diagram }, box);\n                props.setSelectIds(ids);\n                // Done\n                start.current = null;\n            }}\n            ref={containerRef}\n        >\n            <div ref={boxRef} className={s.box}>\n                <div className={s.boxBg} />\n            </div>\n        </div>\n    );\n};\n\nexport const SelectDragLayer = React.memo(SelectDragLayerPure);\n","import { SetSelectIds } from \"./select\";\n\ninterface Props {\n    refId: number;\n    setSelectIds: SetSelectIds;\n}\n\nexport const selectOnRefClick = (props: Props) => () => {\n    props.setSelectIds([{ type: \"ref\", value: props.refId }]);\n};\n","import { EditEdge } from \"diagram/edit/edit\";\nimport * as React from \"react\";\nimport s from \"./edge.module.scss\";\nimport { EdgePath } from \"./state/path\";\nimport { getEdgeSubElementId } from \"./utils\";\n\ninterface Props {\n    edge: EditEdge;\n    path: EdgePath;\n}\n\nexport const EdgeHighlight = (props: Props) => (\n    <circle className={s.dot} r=\"4\">\n        <animateMotion\n            dur={`${props.path.length / 150}s`}\n            repeatCount=\"indefinite\"\n            id={getEdgeSubElementId(props.edge.id, \"highlight\")}\n            path={props.path.main}\n        />\n    </circle>\n);\n","import { selectOnRefClick } from \"app/view/select/edge\";\nimport { SetSelectIds } from \"app/view/select/select\";\nimport { EditEdge, EditTable } from \"diagram/edit/edit\";\nimport { DiagramAction } from \"diagram/state/reducer/reducer\";\nimport React from \"react\";\nimport { debugLog } from \"utils/debug\";\nimport s from \"./edge.module.scss\";\nimport { EdgeFrom } from \"./from\";\nimport { useEdgeState } from \"./state/state\";\nimport { EdgeTo } from \"./to\";\nimport { getEdgeElementId, getEdgeSubElementId } from \"./utils\";\nimport { EdgeHighlight } from \"./highlight\";\nimport { EdgesMids } from \"./state/mid\";\n\ninterface Props {\n    edge: EditEdge;\n    // Tables\n    fromTable: EditTable;\n    toTable: EditTable;\n    // Diagram\n    edgesMids: React.MutableRefObject<EdgesMids>;\n    diagramDispatch: React.Dispatch<DiagramAction>;\n    // Select\n    isSelected: boolean;\n    setSelectIds: SetSelectIds;\n}\n\nconst getClassName = (props: Props): string => {\n    const array = [s.container];\n    if (props.isSelected) array.push(s.selected);\n    return array.join(\" \");\n};\n\nconst EdgePure = (props: Props) => {\n    debugLog(\"Edge\", props.edge.from.rows, props.edge.to.rows);\n\n    const { edge, fromTable, toTable, edgesMids } = props;\n    const draw = useEdgeState({ edge, fromTable, toTable, edgesMids });\n    if (draw === null) return null;\n    const { path, points } = draw;\n\n    return (\n        <g id={getEdgeElementId(props.edge.id)} className={getClassName(props)}>\n            <path\n                id={getEdgeSubElementId(edge.id, \"path-main\")}\n                className={s.path}\n                d={path.main}\n            />\n            <path className={s.path} d={path.from} />\n            <path className={s.path} d={path.to} />\n            <EdgeFrom edge={props.edge} points={points.from} />\n            <EdgeTo edge={props.edge} points={points.to} />\n            {props.isSelected && (\n                <EdgeHighlight edge={props.edge} path={path} />\n            )}\n            <path\n                className={s.hitarea}\n                d={path.main}\n                onClick={selectOnRefClick({\n                    refId: props.edge.id,\n                    setSelectIds: props.setSelectIds,\n                })}\n            />\n        </g>\n    );\n};\n\nexport const Edge = React.memo(EdgePure);\n","import { Edge } from \"app/edge/edge\";\nimport { useEdgesMids } from \"app/edge/state/mid\";\nimport { SetSelectIds } from \"app/view/select/select\";\nimport { EditDiagram, EditRefSide, EditTable } from \"diagram/edit/edit\";\nimport { DiagramAction } from \"diagram/state/reducer/reducer\";\nimport * as React from \"react\";\nimport s from \"./edges.module.css\";\n\ninterface Props {\n    diagram: EditDiagram;\n    diagramDispatch: React.Dispatch<DiagramAction>;\n    selectedRefs: Set<number>;\n    setSelectIds: SetSelectIds;\n    tablesMap: Map<number, EditTable>;\n}\n\nexport const CanvasEdges = (props: Props) => {\n    const getTable = (side: EditRefSide): EditTable => {\n        const table = props.tablesMap.get(side.table);\n        if (table !== undefined) return table;\n        throw Error(\"Table is undefined\");\n    };\n\n    const edgesMids = useEdgesMids({ edges: props.diagram.refs });\n\n    return (\n        <svg\n            className={s.container}\n            width={props.diagram.size.width}\n            height={props.diagram.size.height}\n        >\n            {props.diagram.refs.map((edge) => (\n                <Edge\n                    key={edge.id}\n                    edge={edge}\n                    // Select\n                    isSelected={props.selectedRefs.has(edge.id)}\n                    setSelectIds={props.setSelectIds}\n                    // Tables\n                    fromTable={getTable(edge.from)}\n                    toTable={getTable(edge.to)}\n                    // Diagram\n                    edgesMids={edgesMids}\n                    diagramDispatch={props.diagramDispatch}\n                />\n            ))}\n        </svg>\n    );\n};\n","import { background } from \"@moai/core\";\nimport { Table } from \"app/table/table\";\nimport { EditDiagram, EditEdge, EditTable } from \"diagram/edit/edit\";\nimport { DiagramAction } from \"diagram/state/reducer/reducer\";\nimport React from \"react\";\nimport { debugLog } from \"utils/debug\";\nimport { Platform, usePlatform } from \"utils/platform\";\nimport { SelectDragLayer } from \"../select/canvas/drag/drag\";\nimport { SetSelectIds } from \"../select/select\";\nimport s from \"./canvas.module.scss\";\nimport { CanvasEdges } from \"./edges/edges\";\n\ninterface Props {\n    // Diagram\n    diagram: EditDiagram;\n    diagramDispatch: React.Dispatch<DiagramAction>;\n    // View\n    isRowsExpand: boolean;\n    zoom: number;\n    viewportRef: React.RefObject<HTMLDivElement>;\n    forceVisible: boolean;\n    // Select\n    selectedTables: Set<number>;\n    selectedRefs: Set<number>;\n    setSelectIds: SetSelectIds;\n}\n\nconst getContainerStyle = (\n    props: Props,\n    platform: Platform\n): React.CSSProperties => {\n    const [{ zoom }, { width, height }] = [props, props.diagram.size];\n    const halfMargin = (zoom - 1) / 2;\n    const margin = `${height * halfMargin}px ${width * halfMargin}px`;\n    const transform = zoom !== 1 ? `scale(${zoom})` : \"\";\n    const fontSize = platform === \"web\" ? undefined : 12;\n    return { width, height, transform, margin, fontSize };\n};\n\ntype TablesMap = Map<number, EditTable>;\n\nconst toTablesMap = (map: TablesMap, table: EditTable): TablesMap => {\n    map.set(table.id, table);\n    return map;\n};\n\nexport interface RelatedEdge {\n    edge: EditEdge;\n    table: EditTable;\n}\ntype RelatedEdgesMap = Map<number, RelatedEdge[]>;\n\nconst toRelatedEdgesMap = (tablesMap: TablesMap) => {\n    return (map: RelatedEdgesMap, edge: EditEdge) => {\n        const toTable = tablesMap.get(edge.to.table) as EditTable;\n        const fromTable = tablesMap.get(edge.from.table) as EditTable;\n        // From table\n        const fromKey = edge.from.table;\n        const fromEdges = map.get(fromKey) ?? [];\n        map.set(fromKey, fromEdges.concat({ edge, table: toTable }));\n        // To table\n        const toKey = edge.to.table;\n        const toEdges = map.get(toKey) ?? [];\n        map.set(toKey, toEdges.concat({ edge, table: fromTable }));\n        return map;\n    };\n};\n\n// To have stable identity\nconst emptyArray: RelatedEdge[] = [];\n\nexport const Canvas = (props: Props) => {\n    debugLog(\"Canvas\");\n\n    const { refs, tables } = props.diagram;\n\n    const tablesMap = React.useMemo(() => {\n        return tables.reduce(toTablesMap, new Map());\n    }, [tables]);\n\n    const edgesMap = React.useMemo(() => {\n        return refs.reduce(toRelatedEdgesMap(tablesMap), new Map());\n    }, [refs, tablesMap]);\n\n    const platform = usePlatform();\n\n    return (\n        <div\n            id=\"canvas\"\n            className={[s.container, background.secondary].join(\" \")}\n            style={getContainerStyle(props, platform)}\n        >\n            {/* Separate grid so both grid and background color is included\n            in exported image */}\n            <div className={s.grid} />\n            <SelectDragLayer\n                diagram={props.diagram}\n                setSelectIds={props.setSelectIds}\n            />\n            <CanvasEdges\n                diagram={props.diagram}\n                diagramDispatch={props.diagramDispatch}\n                setSelectIds={props.setSelectIds}\n                selectedRefs={props.selectedRefs}\n                tablesMap={tablesMap}\n            />\n            {props.diagram.tables.map((table) => (\n                <Table\n                    key={table.id}\n                    // Table\n                    table={table}\n                    // Select\n                    isSelected={props.selectedTables.has(table.id)}\n                    setSelectId={props.setSelectIds}\n                    // Diagram\n                    isRowsExpand={props.isRowsExpand}\n                    columns={props.diagram.columns}\n                    relatedEdges={edgesMap.get(table.id) ?? emptyArray}\n                    diagramDispatch={props.diagramDispatch}\n                    // View\n                    viewportRef={props.viewportRef}\n                    zoom={props.zoom}\n                    forceVisible={props.forceVisible}\n                />\n            ))}\n        </div>\n    );\n};\n","import React from \"react\";\nimport dragscroll from \"dragscroll\";\n\nimport \"./use-drag.scss\";\nimport { SetState } from \"@tableplus/toolkit/src/types/types\";\n\ninterface State {\n    drag: boolean;\n    setDrag: SetState<boolean>;\n    element: HTMLDivElement;\n}\n\nconst onKeyUp = (state: State) => {\n    const me = () => {\n        state.setDrag(false);\n        state.element.classList.remove(\"dragscroll\");\n        dragscroll.reset();\n        state.element.removeEventListener(\"keyup\", me);\n    };\n    return me;\n};\n\nconst onKeyDown = (state: State) => (event: KeyboardEvent) => {\n    if (event.target instanceof HTMLInputElement) return;\n    if (event.key !== \" \") return;\n    event.preventDefault();\n    if (state.drag) return;\n\n    state.setDrag(true);\n    state.element.classList.add(\"dragscroll\");\n    dragscroll.reset();\n    state.element.addEventListener(\"keyup\", onKeyUp(state));\n};\n\nexport const useDragToScroll = (ref: React.RefObject<HTMLDivElement>) => {\n    const [drag, setDrag] = React.useState(false);\n\n    React.useEffect(() => {\n        const element = ref.current;\n        if (element === null) return;\n        const state = { drag, setDrag, element };\n\n        element.tabIndex = 0;\n        const listener = onKeyDown(state);\n        element.addEventListener(\"keydown\", listener);\n        return () => element.removeEventListener(\"keydown\", listener);\n    }, [drag, ref]);\n};\n","import { Button } from \"@moai/core\";\nimport { icon } from \"@tableplus/toolkit/src/icon/icon\";\nimport { getTableElement } from \"app/table/utils\";\nimport { EditTable } from \"diagram/edit/edit\";\nimport { getNumberId } from \"diagram/state/reducer/id\";\nimport { DiagramAction } from \"diagram/state/reducer/reducer\";\nimport React from \"react\";\nimport { SetSelectIds } from \"../select/select\";\nimport { HeaderButtonProps } from \"./header\";\n\ninterface Props extends HeaderButtonProps {\n    tables: EditTable[];\n    diagramDispatch: React.Dispatch<DiagramAction>;\n    setSelectIds: SetSelectIds;\n}\n\n// @TODO unify this and the one at \"search\"?\nconst scrollOption: ScrollIntoViewOptions = {\n    behavior: \"smooth\",\n    block: \"center\",\n    inline: \"center\",\n};\n\nexport const HeaderAddTable = (props: Props) => {\n    const onClick = () => {\n        const id = getNumberId(props.tables.map((t) => t.id));\n        props.diagramDispatch({ type: \"add-table\", payload: { id } });\n        window.setTimeout(() => {\n            props.setSelectIds([{ type: \"table\", value: id }]);\n            getTableElement(id).scrollIntoView(scrollOption);\n        }, 0); // Run after React's render new table\n    };\n    return (\n        <Button\n            onClick={onClick}\n            size={props.buttonSize}\n            icon={icon.plus}\n            children=\"Table\"\n        />\n    );\n};\n","import domtoimage from \"dom-to-image\";\nimport * as React from \"react\";\nimport { ExportImageFile, ExportImageFormat } from \"./image\";\n\ninterface Props {\n    canvas: Node;\n    format: ExportImageFormat;\n    setTableVisible: React.Dispatch<React.SetStateAction<boolean>>;\n}\n\nconst prefixes: Record<ExportImageFormat, string> = {\n    svg: \"data:image/svg+xml;charset=utf-8,\",\n    png: \"data:image/png;base64,\",\n};\n\nconst getImageData = async (props: Props): Promise<string> => {\n    switch (props.format) {\n        case \"png\":\n            return await domtoimage.toPng(props.canvas);\n        case \"svg\":\n            return await domtoimage.toSvg(props.canvas);\n    }\n};\n\nconst sleep = async (num: number): Promise<void> => {\n    await new Promise((resolve) => window.setTimeout(() => resolve(), num));\n};\n\nexport const getExportImageFile = async (\n    props: Props\n): Promise<ExportImageFile> => {\n    props.setTableVisible(true);\n    sleep(100); // wait just for sure that React and browser renders all\n    const data = await getImageData(props);\n    props.setTableVisible(false);\n    const prefix = prefixes[props.format];\n    const body = data.replace(prefix, \"\");\n    return { prefix, body };\n};\n","import { encode } from \"js-base64\";\nimport { Platform } from \"utils/platform\";\nimport { ExportImageFile, ExportImageFormat } from \"./image\";\n\n// TODO: Investigate more why the encoder can't encode these characters instead\n// of manually maintaining this blacklist\nconst badWords = [\"&%23xA;\", \"&%239;\"];\n\nconst toBase64 = (file: ExportImageFile): string => {\n    if (file.prefix.includes(\"base64\")) return file.body;\n    if (file.prefix.includes(\"utf-8\")) {\n        let clean = file.body;\n        badWords.forEach((word) => {\n            clean = clean.replaceAll(word, \"\");\n        });\n        return encode(clean);\n    }\n    throw Error(`Unknown file prefix: ${file.prefix}`);\n};\n\nconst saveWithWebkit = (props: Props): void => {\n    const message = {\n        data: toBase64(props.file),\n        ext: props.format,\n        name: \"diagram\",\n        title: \"Save diagram as…\",\n    };\n    (window as any).webkit.messageHandlers.saveFile.postMessage(message);\n};\n\nconst saveWithLink = (props: Props): void => {\n    const link = document.createElement(\"a\");\n    link.download = `diagram.${props.format}`;\n    link.href = `${props.file.prefix}${props.file.body}`;\n    link.click();\n};\n\ninterface Props {\n    file: ExportImageFile;\n    format: ExportImageFormat;\n    platform: Platform;\n}\n\nexport const saveExportImageFile = (props: Props): void => {\n    switch (props.platform) {\n        case \"mac\":\n            return saveWithWebkit(props);\n        case \"web\":\n            return saveWithLink(props);\n    }\n};\n","import { Platform } from \"utils/platform\";\nimport { getExportImageFile } from \"./get\";\nimport { saveExportImageFile } from \"./save\";\n\nexport type ExportImageFormat = \"png\" | \"svg\";\n\nexport interface ExportImageFile {\n    prefix: string;\n    body: string; // base64, without prefix\n}\n\nexport const exportAsImage = async (\n    setTableVisible: React.Dispatch<React.SetStateAction<boolean>>,\n    platform: Platform,\n    format: ExportImageFormat,\n): Promise<void> => {\n    const canvas = document.getElementById(\"canvas\");\n    if (canvas === null) throw Error(\"Canvas is null\");\n    const file = await getExportImageFile({ canvas, format, setTableVisible });\n    saveExportImageFile({ file, format, platform });\n};\n","import { makeDiagramFromEdit } from \"diagram/edit/convert/from\";\nimport { EditDiagram } from \"diagram/edit/edit\";\nimport { Platform } from \"utils/platform\";\n\nexport const exportSqlDrivers = [\n    \"MySQL\",\n    \"MariaDB\",\n    \"SQLite\",\n    \"PostgreSQL\",\n    \"Cassandra\",\n    \"Snowflake\",\n    \"MicrosoftSQLServer\",\n];\n\nexport const exportAsSql = (\n    edit: EditDiagram,\n    platform: Platform,\n    driver: string\n): void => {\n    if (platform === \"web\")\n        return window.alert(\"Export to SQL requires TablePlus app\");\n    const message = { data: makeDiagramFromEdit(edit), driver };\n    (window as any).webkit.messageHandlers.exportSQL.postMessage(message);\n};\n","import { ButtonMenu, ButtonMenuAction } from \"@moai/core\";\nimport { icon } from \"@tableplus/toolkit/src/icon/icon\";\nimport { EditDiagram } from \"diagram/edit/edit\";\nimport React from \"react\";\nimport { usePlatform } from \"utils/platform\";\nimport { HeaderButtonProps } from \"../header\";\nimport { exportAsImage } from \"./image/image\";\nimport { exportAsSql, exportSqlDrivers } from \"./sql/sql\";\n\ninterface Props extends HeaderButtonProps {\n    diagram: EditDiagram;\n    setTableVisible: React.Dispatch<React.SetStateAction<boolean>>;\n}\n\nexport const HeaderExport = (props: Props) => {\n    const platform = usePlatform();\n    const actions: ButtonMenuAction[] = [\n        {\n            label: \"Save as Image (PNG)\",\n            fn: () => exportAsImage(props.setTableVisible, platform, \"png\"),\n        },\n        {\n            label: \"Save as Web page (SVG)\",\n            fn: () => exportAsImage(props.setTableVisible, platform, \"svg\"),\n        },\n        { label: \"──────────\", fn: () => {}, disabled: true },\n        ...exportSqlDrivers.map((driver) => ({\n            label: `Export to ${driver}`,\n            fn: () => exportAsSql(props.diagram, platform, driver),\n        })),\n    ];\n    return (\n        <ButtonMenu\n            icon={icon.share}\n            actions={actions}\n            size={props.buttonSize}\n        />\n    );\n};\n","import { Switcher } from \"@moai/core\";\nimport { icon } from \"@tableplus/toolkit/src/icon/icon\";\nimport { UndoAction } from \"diagram/state/undo/undo\";\nimport React from \"react\";\nimport { HeaderButtonProps } from \"./header\";\n\ninterface Props<T> extends HeaderButtonProps {\n    past: T[];\n    future: T[];\n    dispatch: React.Dispatch<UndoAction>;\n}\n\nconst setValue = <T,>(props: Props<T>) => (value: string) => {\n    switch (value) {\n        case \"undo\":\n            return props.dispatch({ type: \"undo\" });\n        case \"redo\":\n            return props.dispatch({ type: \"redo\" });\n        default:\n            throw Error(`Unknown value: \"${value}\"`);\n    }\n};\n\nconst undo = { key: \"undo\", icon: icon.undo, value: \"undo\" };\nconst redo = { key: \"redo\", icon: icon.redo, value: \"redo\" };\n\nexport const HeaderHistory = <T,>(props: Props<T>) => (\n    <Switcher<string>\n        value={\"\"}\n        setValue={setValue(props)}\n        options={[\n            { ...undo, disabled: props.past.length === 0 },\n            { ...redo, disabled: props.future.length === 0 },\n        ]}\n        size={props.buttonSize}\n    />\n);\n","import { Button, ButtonMenu, ButtonMenuAction } from \"@moai/core\";\nimport { icon } from \"@tableplus/toolkit/src/icon/icon\";\nimport { DiagramAction } from \"diagram/state/reducer/reducer\";\nimport React from \"react\";\nimport { HeaderButtonProps } from \"../header\";\nimport s from \"./layout.module.css\";\n\ninterface Props extends HeaderButtonProps {\n    diagramDispatch: React.Dispatch<DiagramAction>;\n    setIsRowsExpand: React.Dispatch<React.SetStateAction<boolean>>;\n}\n\nconst layoutAction: DiagramAction = {\n    type: \"set-layout\",\n    payload: { type: \"auto\" },\n};\n\nconst getActions = (props: Props): ButtonMenuAction[] => [\n    {\n        label: \"Expand all columns and Arrange\",\n        fn: () => {\n            props.setIsRowsExpand(true);\n            window.setTimeout(() => props.diagramDispatch(layoutAction), 0);\n        },\n    },\n    {\n        label: \"Collapse columns and Arrange\",\n        fn: () => {\n            props.setIsRowsExpand(false);\n            window.setTimeout(() => props.diagramDispatch(layoutAction), 0);\n        },\n    },\n];\n\nexport const HeaderLayout = (props: Props) => (\n    <div className={s.container}>\n        <Button\n            icon={icon.layoutAuto}\n            onClick={() => void props.diagramDispatch(layoutAction)}\n            children=\"Arrange\"\n            size={props.buttonSize}\n        />\n        <ButtonMenu\n            actions={getActions(props)}\n            icon={icon.caret}\n            size={props.buttonSize}\n        />\n    </div>\n);\n","import { ButtonMenu } from \"@moai/core\";\nimport { ParseJsonPayload } from \"diagram/state/reducer/parse/json\";\nimport { DiagramAction } from \"diagram/state/reducer/reducer\";\nimport * as React from \"react\";\n\ninterface Props {\n    diagramDispatch: React.Dispatch<DiagramAction>;\n}\n\nconst selfSamples = \"https://diagramplus.com/samples\";\n\nconst loadRemote = async (props: Props, url: string) => {\n    const json = await fetch(url).then((response) => response.json());\n    const text = JSON.stringify(json);\n    const payload: ParseJsonPayload = { text, isAppend: false };\n    props.diagramDispatch({ type: \"parse-json\", payload });\n};\n\nexport const HeaderSample = (props: Props) => (\n    <ButtonMenu\n        actions={[\n            {\n                label: \"Import from Database (require TablePlus app)\",\n                disabled: true,\n                fn: () => {},\n            },\n            { label: \"──────────\", fn: () => {}, disabled: true },\n            {\n                label: \"Load sample 1 (3 small tables)\",\n                fn: () => loadRemote(props, `${selfSamples}/1.json`),\n            },\n            {\n                label: \"Load sample 2 (Table with many columns)\",\n                fn: () => loadRemote(props, `${selfSamples}/2.json`),\n            },\n            {\n                label: \"Load sample 3 (28 tables)\",\n                fn: () => loadRemote(props, `${selfSamples}/3.json`),\n            },\n            {\n                label: \"Load sample 4 (1710 tables)\",\n                fn: () => loadRemote(props, `${selfSamples}/4.json`),\n            },\n        ]}\n    />\n);\n","import { EditRef } from \"diagram/edit/edit\";\nimport { SelectId, SetSelectIds } from \"./select\";\n\ninterface Props {\n    tableId: number;\n    refs: EditRef[];\n    setSelectIds: SetSelectIds;\n}\n\nconst isRelated = (target: number) => (ref: EditRef): boolean =>\n    [ref.from.table, ref.to.table].includes(target);\n\ntype Event = React.MouseEvent<HTMLDivElement>;\n\nexport const getTableRelatedIds = (\n    tableId: number,\n    refs: EditRef[]\n): SelectId[] => {\n    const ids: SelectId[] = refs\n        .filter(isRelated(tableId))\n        .map((ref) => ({ type: \"ref\", value: ref.id }));\n    ids.push({ type: \"table\", value: tableId });\n    return ids;\n};\n\nexport const selectOnTableFocus = (props: Props) => (event: Event) => {\n    if (event.target instanceof HTMLInputElement) return;\n    const ids = getTableRelatedIds(props.tableId, props.refs);\n    props.setSelectIds(ids);\n};\n","import { Input } from \"@moai/core\";\nimport { icon } from \"@tableplus/toolkit/src/icon/icon\";\nimport { getTableElement } from \"app/table/utils\";\nimport { SetSelectIds } from \"app/view/select/select\";\nimport { getTableRelatedIds } from \"app/view/select/table\";\nimport { EditDiagram } from \"diagram/edit/edit\";\nimport React from \"react\";\nimport { HeaderInputProps } from \"./header\";\n\ninterface Props extends HeaderInputProps {\n    diagram: EditDiagram;\n    setSelectIds: SetSelectIds;\n}\n\nconst scrollOption: ScrollIntoViewOptions = {\n    behavior: \"smooth\",\n    block: \"center\",\n    inline: \"center\",\n};\n\nconst focusTable = (\n    diagram: EditDiagram,\n    setSelectIds: SetSelectIds,\n    name: string\n) => {\n    // Select the table in state\n    const table = diagram.tables.find((table) => table.value.name === name);\n    // Throwing error here because we already check in the useEffect\n    if (table === undefined) throw Error(\"table is undefined\");\n    setSelectIds(getTableRelatedIds(table.id, diagram.refs));\n    // Scroll the element into view\n    getTableElement(table.id).scrollIntoView(scrollOption);\n};\n\nexport const HeaderSearch = (props: Props) => {\n    const { diagram, setSelectIds } = props;\n\n    const tables: string[] = React.useMemo(() => {\n        const set = new Set<string>();\n        diagram.tables.forEach((table) => void set.add(table.value.name));\n        return [...set];\n    }, [diagram.tables]);\n\n    const [value, _setValue] = React.useState(\"\");\n\n    const focusIfNecessary = (name: string) => {\n        if (tables.includes(name) === false) return;\n        focusTable(diagram, setSelectIds, name);\n    };\n\n    return (\n        <div style={{ flex: \"1 1 0px\" }}>\n            <Input\n                icon={icon.search}\n                placeholder=\"Find table…\"\n                value={value}\n                setValue={(newValue) => {\n                    _setValue(newValue);\n                    focusIfNecessary(newValue);\n                }}\n                list={{ id: \"header-search\", values: tables }}\n                onKeyUp={(event) => {\n                    if (event.key !== \"Enter\") return;\n                    focusIfNecessary(value);\n                }}\n                size={props.inputSize}\n            />\n        </div>\n    );\n};\n","import React from \"react\";\nimport { SetState } from \"@tableplus/toolkit/src/types/types\";\nimport { Switcher, SwitcherOption } from \"@moai/core\";\nimport { Theme } from \"@tableplus/toolkit/src/prefs/theme/theme\";\nimport { icon } from \"@tableplus/toolkit/src/icon/icon\";\nimport { HeaderButtonProps } from \"./header\";\n\ninterface Props extends HeaderButtonProps {\n    theme: Theme;\n    setTheme: SetState<Theme>;\n}\n\nconst options: SwitcherOption<Theme>[] = [\n    { value: \"theme-light\", icon: icon.flash, key: \"light\" },\n    { value: \"theme-auto\", label: \"System\", key: \"auto\" },\n    { value: \"theme-dark\", icon: icon.moon, key: \"dark\" },\n];\n\nexport const HeaderTheme = (props: Props) => (\n    <Switcher<Theme>\n        value={props.theme}\n        setValue={props.setTheme}\n        options={options}\n        size={props.buttonSize}\n    />\n);\n","import React from \"react\";\nimport { SetState } from \"@tableplus/toolkit/src/types/types\";\nimport { Switcher } from \"@moai/core\";\nimport { icon } from \"@tableplus/toolkit/src/icon/icon\";\nimport { HeaderButtonProps } from \"./header\";\n\ninterface Props extends HeaderButtonProps {\n    viewportRef: React.RefObject<HTMLDivElement>;\n    zoom: number;\n    setZoom: SetState<number>;\n}\n\ntype Value = \"out\" | \"reset\" | \"in\" | null;\n\nconst setValue = (props: Props) => (value: Value): void => {\n    switch (value) {\n        case \"reset\":\n            return props.setZoom(1);\n        case \"in\":\n            if (props.zoom >= 2) return;\n            return props.setZoom(props.zoom + 0.25);\n        case \"out\":\n            if (props.zoom <= 0.25) return;\n            return props.setZoom(props.zoom - 0.25);\n        default:\n            throw Error(`Unknown value: \"${value}\"`);\n    }\n};\n\nexport const HeaderZoom = (props: Props) => (\n    <Switcher<Value>\n        value={null}\n        setValue={setValue(props)}\n        options={[\n            { key: \"out\", icon: icon.zoomOut, value: \"out\" },\n            { label: `${props.zoom * 100}%`, value: \"reset\" },\n            { key: \"in\", icon: icon.zoomIn, value: \"in\" },\n        ]}\n        size={props.buttonSize}\n    />\n);\n","import {\n    Border,\n    Button,\n    ButtonSize,\n    DivPx,\n    Input,\n    InputSize,\n} from \"@moai/core\";\nimport { Theme } from \"@tableplus/toolkit/src/prefs/theme/theme\";\nimport { SetState } from \"@tableplus/toolkit/src/types/types\";\nimport { SetSelectIds } from \"app/view/select/select\";\nimport { EditDiagram } from \"diagram/edit/edit\";\nimport { DiagramAction } from \"diagram/state/reducer/reducer\";\nimport { UndoAction } from \"diagram/state/undo/undo\";\nimport React from \"react\";\nimport { debugLog } from \"utils/debug\";\nimport { Platform, usePlatform } from \"utils/platform\";\nimport { HeaderAddTable } from \"./add\";\nimport { HeaderExport } from \"./export/export\";\nimport { HeaderHistory } from \"./history\";\nimport { HeaderLayout } from \"./layout/layout\";\nimport { HeaderSample } from \"./sample/sample\";\nimport { HeaderSearch } from \"./search\";\nimport s from \"./style/header.module.scss\";\nimport sMac from \"./style/mac.module.scss\";\nimport { HeaderTheme } from \"./theme\";\nimport { HeaderZoom } from \"./zoom\";\n\nexport interface HeaderPrimaryProps {\n    // Diagram\n    diagram: EditDiagram;\n    diagramPast: EditDiagram[];\n    diagramFuture: EditDiagram[];\n    diagramDispatch: React.Dispatch<DiagramAction | UndoAction>;\n    // View\n    viewportRef: React.RefObject<HTMLDivElement>;\n    zoom: number;\n    setZoom: SetState<number>;\n    setTableVisible: React.Dispatch<React.SetStateAction<boolean>>;\n    setIsRowsExpand: React.Dispatch<React.SetStateAction<boolean>>;\n    // Select\n    setSelectIds: SetSelectIds;\n    // App\n    theme: Theme;\n    setTheme: SetState<Theme>;\n}\n\nexport interface HeaderButtonProps {\n    buttonSize: ButtonSize;\n}\n\nexport interface HeaderInputProps {\n    inputSize: InputSize;\n}\n\nconst platformStyle: Record<Platform, string> = {\n    web: \"\",\n    mac: sMac.container,\n};\n\nconst getSize = (platform: Platform): [ButtonSize, InputSize] => {\n    switch (platform) {\n        case \"mac\":\n            return [Button.size.small, Input.size.small];\n        default:\n            return [Button.size.medium, Input.size.medium];\n    }\n};\n\nconst getBigDiv = (platform: Platform): JSX.Element => {\n    const border = platform === \"web\" ? <Border color=\"weak\" /> : null;\n    return (\n        <>\n            <DivPx size={16} /> {border} <DivPx size={16} />\n        </>\n    );\n};\n\nexport const ViewHeaderPure = (props: HeaderPrimaryProps) => {\n    debugLog(\"ViewHeader\");\n\n    const platform = usePlatform();\n    const [buttonSize, inputSize] = getSize(platform);\n    const bigDiv = getBigDiv(platform);\n\n    return (\n        <div className={[s.container, platformStyle[platform]].join(\" \")}>\n            <div className={s.platformPad} />\n            <DivPx size={16} />\n            {platform === \"web\" && (\n                <>\n                    <HeaderSample diagramDispatch={props.diagramDispatch} />\n                    {bigDiv}\n                </>\n            )}\n            <HeaderAddTable\n                buttonSize={buttonSize}\n                tables={props.diagram.tables}\n                diagramDispatch={props.diagramDispatch}\n                setSelectIds={props.setSelectIds}\n            />\n            <DivPx size={16} />\n            <HeaderHistory\n                buttonSize={buttonSize}\n                past={props.diagramPast}\n                future={props.diagramFuture}\n                dispatch={props.diagramDispatch}\n            />\n            {bigDiv}\n            <HeaderSearch\n                inputSize={inputSize}\n                diagram={props.diagram}\n                setSelectIds={props.setSelectIds}\n            />\n            {bigDiv}\n            <HeaderLayout\n                buttonSize={buttonSize}\n                setIsRowsExpand={props.setIsRowsExpand}\n                diagramDispatch={props.diagramDispatch}\n            />\n            <DivPx size={16} />\n            <HeaderZoom\n                buttonSize={buttonSize}\n                viewportRef={props.viewportRef}\n                zoom={props.zoom}\n                setZoom={props.setZoom}\n            />\n            <DivPx size={16} />\n            <HeaderExport\n                buttonSize={buttonSize}\n                diagram={props.diagram}\n                setTableVisible={props.setTableVisible}\n            />\n            {platform === \"web\" && (\n                <>\n                    {bigDiv}\n                    <HeaderTheme\n                        buttonSize={buttonSize}\n                        theme={props.theme}\n                        setTheme={props.setTheme}\n                    />\n                </>\n            )}\n            <DivPx size={16} />\n        </div>\n    );\n};\n\nexport const ViewHeader = React.memo(ViewHeaderPure);\n","import { ProgressCircle, background, DivPx } from \"@moai/core\";\nimport React from \"react\";\nimport s from \"./progress.module.scss\";\nimport { addExternalFn } from \"external/external\";\n\nexport type Progress = boolean | number;\n\nconst registerExternal = addExternalFn(\"setProgressIndicator\");\n\nexport const ViewProgress = () => {\n    const [progress, setProgress] = React.useState<Progress>(false);\n    const [text, setText] = React.useState<string | undefined>(undefined);\n\n    React.useEffect(() => {\n        const fn = (progress: Progress, text?: string) => {\n            setProgress(progress);\n            setText(text);\n        };\n        registerExternal(fn);\n    }, []);\n\n    if (progress === false) return null;\n    return (\n        <div className={[s.container, background.secondary].join(\" \")}>\n            <div className={s.body}>\n                <ProgressCircle\n                    size={24}\n                    value={progress === true ? null : progress}\n                />\n                {text !== undefined && (\n                    <>\n                        <DivPx size={16} />\n                        <div>{text}</div>\n                    </>\n                )}\n            </div>\n        </div>\n    );\n};\n","import { makeDiagramFromEdit } from \"diagram/edit/convert/from\";\nimport { EditDiagram } from \"diagram/edit/edit\";\nimport * as React from \"react\";\nimport { getSelectSets, SelectId } from \"../select\";\n\ninterface Props {\n    ids: SelectId[];\n    diagram: EditDiagram;\n}\n\nconst catchCopy = (props: Props, event: ClipboardEvent) => {\n    if (event.target instanceof HTMLInputElement) return;\n    if (event.target instanceof HTMLTextAreaElement) return;\n    if (props.ids.length === 0) return;\n    const { tables: selected } = getSelectSets(props.ids);\n    if (selected.size === 0) return;\n    const edit: EditDiagram = {\n        columns: props.diagram.columns,\n        tables: props.diagram.tables.filter((table) => {\n            return selected.has(table.id);\n        }),\n        refs: props.diagram.refs.filter((ref) => {\n            return selected.has(ref.from.table) && selected.has(ref.to.table);\n        }),\n        size: { width: 0, height: 0 },\n        schema: props.diagram.schema,\n    };\n    const diagram = makeDiagramFromEdit(edit);\n    const text = JSON.stringify(diagram);\n    event.clipboardData?.setData(\"text/plain\", text);\n    event.preventDefault();\n};\n\n// @TODO: These should not belong to \"select\"\nexport const useCanvasCatchCopy = (props: Props) => {\n    const { ids, diagram } = props;\n    React.useEffect(() => {\n        const listener = (event: ClipboardEvent) => {\n            return catchCopy({ ids, diagram }, event);\n        };\n        document.addEventListener(\"copy\", listener);\n        return () => document.removeEventListener(\"copy\", listener);\n    }, [ids, diagram]);\n};\n","import { DiagramAction } from \"diagram/state/reducer/reducer\";\nimport * as React from \"react\";\nimport { SelectId, SelectIdType } from \"../select\";\n\nconst filterIds = (ids: SelectId[], type: SelectIdType): number[] =>\n    ids.filter((id) => id.type === type).map((id) => id.value);\n\ninterface Props {\n    ids: SelectId[];\n    diagramDispatch: React.Dispatch<DiagramAction>;\n    event: React.KeyboardEvent;\n}\n\nexport const catchDelete = ({ ids, event, diagramDispatch }: Props) => {\n    if ([\"Backspace\", \"Delete\"].includes(event.key) === false) return;\n    if (event.target instanceof HTMLInputElement) return;\n    if (event.target instanceof HTMLTextAreaElement) return;\n    diagramDispatch({\n        type: \"remove-multiple-refs\",\n        payload: { ids: filterIds(ids, \"ref\") },\n    });\n    diagramDispatch({\n        type: \"remove-multiple-tables\",\n        payload: { ids: filterIds(ids, \"table\") },\n    });\n    event.stopPropagation();\n};\n","import { ParseJsonPayload } from \"diagram/state/reducer/parse/json\";\nimport { DiagramAction } from \"diagram/state/reducer/reducer\";\nimport * as React from \"react\";\n\ninterface Props {\n    dispatch: React.Dispatch<DiagramAction>;\n}\n\nconst catchPaste = (props: Props, event: ClipboardEvent) => {\n    if (event.target instanceof HTMLInputElement) return;\n    if (event.target instanceof HTMLTextAreaElement) return;\n    const payload: ParseJsonPayload = {\n        text: event.clipboardData?.getData(\"text/plain\") ?? \"\",\n        isAppend: true,\n    };\n    props.dispatch({ type: \"parse-json\", payload });\n};\n\nexport const useCanvasCatchPaste = (props: Props) => {\n    const { dispatch } = props;\n    React.useEffect(() => {\n        const listener = (event: ClipboardEvent) => {\n            return catchPaste({ dispatch }, event);\n        };\n        document.addEventListener(\"paste\", listener);\n        return () => document.removeEventListener(\"paste\", listener);\n    }, [dispatch]);\n};\n","import { background, Border } from \"@moai/core\";\nimport { useTheme } from \"@tableplus/toolkit/src/prefs/theme/theme\";\nimport { RowDragLayer } from \"app/row/drag/layer/layer\";\nimport { useDiagram } from \"diagram/state/use-diagram\";\nimport React from \"react\";\nimport { Canvas } from \"./canvas/canvas\";\nimport { useDragToScroll } from \"./drag/use-drag\";\nimport { ViewHeader } from \"./header/header\";\nimport { ViewProgress } from \"./progress/progress\";\nimport { useCanvasCatchCopy } from \"./select/canvas/copy\";\nimport { catchDelete } from \"./select/canvas/delete\";\nimport { useCanvasCatchPaste } from \"./select/canvas/paste\";\nimport { useSelect } from \"./select/select\";\nimport s from \"./view.module.scss\";\n\nexport type Mode = \"design\" | \"present\" | \"structure\";\n\nexport const View = () => {\n    const diagram = useDiagram();\n    const [zoom, setZoom] = React.useState<number>(1);\n    const viewportRef = React.useRef<HTMLDivElement>(null);\n    const select = useSelect();\n    const theme = useTheme();\n    const [tableVisible, setTableVisible] = React.useState(false);\n    const [isRowsExpand, setIsRowsExpand] = React.useState(false);\n\n    useCanvasCatchCopy({ diagram: diagram.history.present, ids: select.ids });\n    useCanvasCatchPaste({ dispatch: diagram.dispatch });\n\n    // Drag to scroll viewport\n    useDragToScroll(viewportRef);\n\n    return (\n        <div className={s.container}>\n            <div className={s.header}>\n                <ViewHeader\n                    // Diagram\n                    diagram={diagram.history.present}\n                    diagramPast={diagram.history.past}\n                    diagramFuture={diagram.history.future}\n                    diagramDispatch={diagram.dispatch}\n                    // Theme\n                    theme={theme.theme}\n                    setTheme={theme.setTheme}\n                    // View\n                    viewportRef={viewportRef}\n                    zoom={zoom}\n                    setZoom={setZoom}\n                    setTableVisible={setTableVisible}\n                    setIsRowsExpand={setIsRowsExpand}\n                    // Select\n                    setSelectIds={select.setIds}\n                />\n            </div>\n            <Border color=\"strong\" />\n            <div className={`${s.body} ${background.secondary}`}>\n                <div\n                    className={s.viewport}\n                    tabIndex={0}\n                    ref={viewportRef}\n                    onKeyUp={(event) => {\n                        catchDelete({\n                            ids: select.ids,\n                            diagramDispatch: diagram.dispatch,\n                            event,\n                        });\n                    }}\n                >\n                    <Canvas\n                        // Diagram\n                        diagram={diagram.history.present}\n                        diagramDispatch={diagram.dispatch}\n                        // View\n                        isRowsExpand={isRowsExpand}\n                        zoom={zoom}\n                        viewportRef={viewportRef}\n                        forceVisible={tableVisible}\n                        // Select\n                        selectedRefs={select.refs}\n                        selectedTables={select.tables}\n                        setSelectIds={select.setIds}\n                    />\n                </div>\n                <ViewProgress />\n            </div>\n            <RowDragLayer viewportRef={viewportRef} />\n        </div>\n    );\n};\n","import { DivGrow, DivPx } from \"@moai/core\";\nimport logo from \"@tableplus/toolkit/src/about/logo.png\";\nimport { Links } from \"@tableplus/toolkit/src/footer/links/links\";\nimport { Privacy } from \"@tableplus/toolkit/src/footer/privacy/privacy\";\nimport React from \"react\";\nimport s from \"./footer.module.scss\";\n\nconst Logo = () => (\n    <a\n        className={s.logo}\n        href=\"https://tableplus.com\"\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n    >\n        <img alt=\"TablePlus logo\" src={logo} width=\"auto\" height={32} />\n    </a>\n);\n\nexport const Footer = () => (\n    <div className={s.container}>\n        <DivPx size={16} />\n        <Privacy dataText=\"diagram\" />\n        <DivGrow />\n        <Links offlineMode={false} />\n        <DivPx size={16} />\n        <Logo />\n        <DivPx size={16} />\n    </div>\n);\n","import { Border, scrollbar } from \"@moai/core\";\nimport { View } from \"app/view/view\";\nimport React from \"react\";\nimport { usePlatform } from \"utils/platform\";\nimport s from \"./app.module.scss\";\nimport { Footer } from \"./footer/footer\";\n\nexport const App = () => {\n    const platform = usePlatform();\n    return (\n        <div className={[s.container, scrollbar.custom].join(\" \")}>\n            <div className={s.body}>\n                <View />\n            </div>\n            {platform === \"web\" && (\n                <>\n                    <Border color=\"strong\" />\n                    <div className={s.footer}>\n                        <Footer />\n                    </div>\n                </>\n            )}\n        </div>\n    );\n};\n","import {\n    AppStorage,\n    StorageContext,\n} from \"@tableplus/toolkit/src/storage/storage\";\nimport \"external/external\";\nimport { App } from \"app/app/app\";\nimport \"index.scss\";\nimport React from \"react\";\nimport { DndProvider } from \"react-dnd-multi-backend\";\nimport HTML5toTouch from \"react-dnd-multi-backend/dist/esm/HTML5toTouch\";\nimport ReactDOM from \"react-dom\";\nimport { PlatformContext, usePlatformProvider } from \"utils/platform\";\nimport { migrateStorage } from \"./utils/migrate\";\n\nexport const storage = new AppStorage(\"diagram\");\nmigrateStorage(storage);\n\nconst Root = () => {\n    const platform = usePlatformProvider();\n    return (\n        <React.StrictMode>\n            <StorageContext.Provider value={storage}>\n                <DndProvider options={HTML5toTouch}>\n                    <PlatformContext.Provider value={platform}>\n                        <App />\n                    </PlatformContext.Provider>\n                </DndProvider>\n            </StorageContext.Provider>\n        </React.StrictMode>\n    );\n};\n\nReactDOM.render(<Root />, document.getElementById(\"root\"));\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"layer_container__1DSen\",\"svg\":\"layer_svg__1kDpM\",\"line\":\"layer_line__24WBc\",\"icon\":\"layer_icon__1W0JP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"string_container__6Pyow\",\"view\":\"string_view__1oiV8\",\"weak\":\"string_weak__3HpXd\",\"edit\":\"string_edit__2m0iK\",\"empty\":\"string_empty__3u9-r\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"header_container__1QU6W\",\"main\":\"header_main__1XQwN\",\"edit\":\"header_edit__3vvV8\",\"remove\":\"header_remove__SIzDW\",\"title\":\"header_title__l4mqY\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"view_container__2oDm-\",\"body\":\"view_body__1Z1mW\",\"viewport\":\"view_viewport__1l3sB\",\"header\":\"view_header__3f7ol\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"header_container__2zpDr\",\"slide-in\":\"header_slide-in__TPuT0\",\"field\":\"header_field__nquLg\",\"rightField\":\"header_rightField__3R_Ju\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"main_container__24nAp\",\"selected\":\"main_selected__1OzJ8\",\"edit\":\"main_edit__KBdPX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"drag_container__1_FJJ\",\"box\":\"drag_box__2nmY1\",\"boxBg\":\"drag_boxBg__32YQk\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"app_container__2pv2U\",\"body\":\"app_body__3dFS1\",\"footer\":\"app_footer__1cpy9\"};"],"sourceRoot":""}